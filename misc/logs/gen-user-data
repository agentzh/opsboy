#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Std;
use List::MoreUtils qw( any );

sub usage ();

my %opts;
getopts("e:f", \%opts) or usage();

my $exclude = $opts{e};

my %cpu_lualibs = (
    'resty-string' => 1,
);

my @clibs = qw(
    sregex
);

my %cpu_mods = (
    array_var => 1,
    xss => 1,
    set_misc => 1,
    coolkit => 1,
    encrypted_session => 1,
    example_lua => 1,
);

my @mods = (
    'array_var', 'redis2', 'lua',
    'srcache', 'memc', 'set_misc', 'xss',
    'drizzle', 'rds_json',  'echo',
    'postgres', 'eval',
    'headers_more', 'rds_csv',
    'encrypted_session', 'form_input',
    'coolkit', 'iconv', 'example_lua',
    'replace_filter',
);

my @lualibs = (
    'resty-memcached', 'resty-redis',
    'resty-mysql', 'resty-string',
    'resty-upload', 'resty-dns',
    'resty-websocket', 'resty-lock',
    'resty-logger-socket', 'resty-core',
);

if (!@ARGV) {
    usage();
}

my @goals;

for my $lib (@ARGV) {
    if ($lib =~ /^ngx_(.+)/) {
        my $name = $1;
        if (! any { $name eq $_ } @mods) {
            die "Unknown nginx module $lib\n";
        }

        push @goals, "t-$lib";

        if (!$cpu_mods{$name}) {
            for my $m (qw<tr tw trv twv>) {
                push @goals, "$m-$lib";
            }
        }

        push @goals, "tv-$lib", "th-$lib", "thv-$lib", "tl-$lib", "to-$lib";

    } elsif ($lib =~ /^lua-(.+)/) {
        my $name = $1;

        if (! any { $name eq $_ } @lualibs) {
            die "Unknown lua library $lib\n";
        }

        push @goals, "t-$lib";

        if (!$cpu_lualibs{$name}) {
            for my $m (qw<tr tw trv twv>) {
                push @goals, "$m-$lib";
            }
        }

        push @goals, "tv-$lib", "th-$lib", "thv-$lib", "tl-$lib";

    } elsif (any { $lib eq $_ } @clibs) {
        push @goals, "t-$lib", "tv-$lib";

    } elsif ($lib =~ /^t([a-z]*)$/) {
        my $mode = $1;

        if ($mode !~ /^(?:[rwh]?v|[rwh]|[lo])$/ && $mode ne '') {
            die "Unknown testing mode $mode in goal $lib\n";
        }

        for my $name (@mods) {
            my $lib = "ngx_$name";

            if ($cpu_mods{$name} && $mode =~ /[wr]/) {
                next;
            }

            push @goals, "t$mode-$lib";
        }

        if ($mode =~ /^v?$/) {
            for my $lib (@clibs) {
                push @goals, "t$mode-$lib";
            }
        }

        if ($mode ne 'o') {
            for my $name (@lualibs) {
                my $lib = "lua-$name";

                if ($cpu_lualibs{$name} && $mode =~ /[wr]/) {
                    next;
                }

                push @goals, "t$mode-$lib";
            }
        }

    } elsif ($lib =~ /^t([a-z]*)-(\S+)$/) {
        my ($mode, $name) = ($1, $2);
        if ($mode !~ /^(?:[rwh]?v|[rwh]|[lo])$/ && $mode ne '') {
            die "Unknown testing mode $mode in goal $lib\n";
        }

        if (!(any { "lua-$_" eq $name } @lualibs)
            && !(any { "ngx_$_" eq $name } @mods)
            && !(any { $_ eq $name } @clibs))
        {
            die "Unknown component $name in user goal \"$lib\"\n";
        }

        if ($mode !~ /^v?$/ && any { $_ eq $name } @clibs) {
            die "The \"$mode\" testing mode could not work for \"$name\".\n";
        }

        if ($mode eq 'o' && any { "lua-$_" eq $name } @lualibs) {
            die "The \"o\" testing mode could not work for \"$name\".\n";
        }

        push @goals, $lib;

    } else {
        die "Unknown component or goal $lib\n";
    }
}

if (defined $exclude) {
    my @skipped = grep { $_ eq $exclude || /$exclude/ } @goals;
    if (@skipped) {
        warn "WARNING: skipping goals @skipped\n";
    }

    @goals = grep { my $e = $_; !any { $_ eq $e } @skipped  } @goals;
}

print "@goals\n";
#print scalar @goals;

sub usage () {
    die "$0 [-e <exclude-pattern>] [-f] ngx_foo lua-resty-blah ...\n";
}

