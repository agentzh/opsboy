#!/usr/bin/env perl

use strict;
use warnings;

use Date::Parse;
use Getopt::Std;
use List::MoreUtils qw( uniq );
use JSON::XS;

my %opts;
getopts('vo:', \%opts) or usage();

my $outfile = $opts{o} or usage();

my $verbose = $opts{v};

my %white_list = (
    ngx_rds_csv => [
        ['w', '000_init.t', 'TEST 11: cats - drop table'],
        ['w', '000_init.t', 'TEST 12: cats - create table'],
        ['w', '000_init.t', 'TEST 13: cats - insert value'],
        ['w', '000_init.t', 'TEST 14: cats - insert value'],
        ['w', 'pg.t'],
        ['r', 'sanity-stream.t', 'TEST 1: sanity'],
        ['r', 'sanity-stream.t', 'TEST 2: keep-alive'],
        ['r', 'sanity-stream.t', 'TEST 7: single row, single col'],
        ['r', 'sanity-stream.t', 'TEST 9: text blob field'],
        ['r', 'sanity-stream.t', 'TEST 12: date type'],
    ],

    #ngx_postgres => [['w']],

    ngx_form_input => [
        ['r', 'upload.t', 'TEST 1: big upload - '],
    ],

    ngx_memc => [
        ['v', 'exptime.t', 'TEST 1: set exptime - response_body_like'],
    ],

    ngx_rds_json => [
        ['w', 'pg.t'],
        ['w', '000_init.t', 'TEST 8: cats - drop table'],
        ['w', '000_init.t', 'TEST 9: cats - create table'],
        ['w', '000_init.t', 'TEST 10: cats - insert value'],
        ['w', '000_init.t', 'TEST 11: cats - insert value'],
    ],

    ngx_srcache => [
        ['w', 'postgres-main.t'],
        ['w', '000_init.t', '- pg -'],
        ['w', 'conditional-get.t', 'TEST 7: cache hit (I-U-S conditional GET, 412) - '],
    ],

    ngx_lua => [
        ['r', '071-idle-socket.t', 'TEST 6: set keepalive when cosocket recv buffer has unread data'],
        ['', '058-tcp-socket.t', 'TEST 8: resolver error (host not found)'],
        ['', '058-tcp-socket.t', 'TEST 9: resolver error (timeout) - response_body_like - response is expected'],
        ['w', '072-conditional-get.t', 'TEST 3: If-Unmodified-Since false'],
        ['w', '067-req-socket.t', 'TEST 7: Expect & 100 Continue'],
        ['v', '023-rewrite/sleep.t', 'TEST 3: sleep 0.5 in subrequestg - response_body_like - response is expected'],
        ['v', '023-rewrite/sleep.t', 'TEST 1: sleep 0.5 - response_body_like - response is expected'],
        ['v', '024-access/sleep.t', 'TEST 3: sleep 0.5 in subrequestg - response_body_like - response is expected'],
        ['v', '024-access/sleep.t', 'TEST 1: sleep 0.5 - response_body_like - response is expected'],
        ['v', '077-sleep.t', 'TEST 1: sleep 0.5 - content - response_body_like - response is expected'],
        ['v', '077-sleep.t', 'TEST 3: sleep 0.5 in subrequest - content - response_body_like - response is expected'],
        ['h', '043-shdict.t', '- response_body'],
        ['h', '009-log.t', 'TEST 16: ngx.log() big data - pattern "(?-xism:ah{1970}b)" matches a line in error.log'],
        ['h', '030-uri-args.t', 'TEST 12: rewrite uri and args'],
        ['h', '030-uri-args.t', 'TEST 30: ngx.encode_args (boolean values, false)'],
    ],

    ngx_drizzle => [
        ['h', 'status.t', ' - response_body'],
    ],

    ngx_headers_more => [
        ['rv', 'input.t', 'TEST 4: try to rewrite content length using the rewrite module - '],
    ],

    ngx_echo => [
        ['r', 'echo-timer.t'],
        ['rv', 'request-body.t', 'TEST 1: big client body buffered into temp files'],
        ['v', 'echo-timer.t', 'TEST 1: timer without explicit reset - response_body_like - response is expected'],
        ['v', 'echo-timer.t', 'TEST 2: timer without explicit reset and sleep - response_body_like - response is expected'],
        ['v', 'echo-timer.t', 'TEST 3: timing accumulated sleeps - response_body_like - response is expected'],
        ['v', 'echo-timer.t', 'TEST 4: timer with explicit reset but without sleep - response_body_like - response is expected'],
        ['v', 'echo-timer.t', 'TEST 5: reset timer between sleeps - response_body_like - response is expected'],
        ['v', 'echo-timer.t', 'TEST 6: reset timer between blocking sleeps - response_body_like - response is expected'],
        ['v', 'location-async.t', 'TEST 6: timed multiple subrequests (blocking sleep) - response_body_like - response is expected'],
        ['v', 'location-async.t', 'TEST 7: timed multiple subrequests (non-blocking sleep) - response_body_like - response is expected'],
        ['v', 'location.t', 'TEST 8: timed multiple subrequests (non-blocking sleep) - response_body_like - response is expected'],
        ['v', 'location.t', 'TEST 7: timed multiple subrequests (blocking sleep) - response_body_like - response is expected'],
        ['v', 'subrequest-async.t', 'TEST 8: timed multiple subrequests (non-blocking sleep) - response_body_like - response is expected'],
        ['v', 'subrequest-async.t', 'TEST 7: timed multiple subrequests (blocking sleep) - response_body_like - response is expected'],
        ['v', 'subrequest.t', 'TEST 6: timed multiple subrequests (blocking sleep) - response_body_like - response is expected'],
        ['v', 'subrequest.t', 'TEST 7: timed multiple subrequests (non-blocking sleep) - response_body_like - response is expected'],
    ],
);

my $failure;
my $in_failure;
my $in_valgrind_warning;
my $rec;
my $date;
my $arch;
my @records;
my $test_name;
while (<>) {
    if ($in_valgrind_warning) {
        if (/^\}$/) {
            undef $in_valgrind_warning;
            $failure->{details} .= $_;
            next;

        } elsif (/^(?:\{|\s+|==\d+== )/) {
            $failure->{details} .= $_;
            next;

        } else {
            undef $in_valgrind_warning;
        }
    }

    if ($in_failure && !/^\# /) {
        undef $in_failure;
    }

    if (!defined $date && /^(?:DATE )?(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})$/) {
        $date = $1;
        next;
    }

    if (!defined $arch) {
        if (/^(?:ARCH )?Linux .*\bi386\b/) {
            $arch = 'linux i386';

        } elsif (/^(?:ARCH )?Linux .*\bx86_64\b/) {
            $arch = 'linux x86_64';
        }
    }

    if (/^making (\S+) \.\.\.$/) {
        my $subj = $1;

        if ($subj =~ /^t([rvwh]*)-((?:ngx_|lua-)[-_A-Za-z0-9]+)$/) {
            my ($mode, $module) = ($1, $2);

            #warn "$mode: $module\n";

            if ($rec) {
                if (!$rec->{commit}) {
                    my $line = $rec->{line};
                    die "line $line: No git commit found.\n";
                }

                my $n = @{ $rec->{failures} };
                if ($n >= 2) {
                    my $a = $rec->{failures}[$n - 1];
                    my $b = $rec->{failures}[$n - 2];
                    if ($a->{file} eq $b->{file}
                        && $a->{name} eq $b->{name}
                        && ((!defined $a->{details} && !defined $b->{details})
                            || $a->{details} eq $b->{details}))
                    {
                        #warn "remove duplicate test failures";
                        pop @{ $rec->{failures} };
                    }
                }

                #@{ $rec->{failures} } = uniq @{ $rec->{failures} };
            }

            $rec = {
                module => $module,
                mode => $mode,
                line => $.,
                tests_pass => 0,
                valgrind_pass => 1,
                failures => [],
                valgrind_warnings => [],
                warns => [],
                comp_errors => [],
            };

            push @records, $rec;

        } else {
            #warn "ignoring $subj\n";
            undef $rec;
        }

    } elsif ($rec && /^commit ([0-9a-f]+)$/) {
        $rec->{commit} = $1;

    } elsif ($rec && defined $rec->{commit} && !defined $rec->{commit_date}
             && /Date:\s+([A-Z][a-z]{2} [A-Z][a-z]{2} \d+ .*)/)
    {
        $rec->{commit_date} = str2time($1);

    } elsif ($rec && !defined $rec->{nginx_version} && m{^nginx version: (.*)}) {
        (my $ver = $1) =~ s/without pool/no pool/;
        $rec->{nginx_version} = $ver;

    } elsif ($rec && m{^\./configure: error: (.+)}) {
        $rec->{config_error} = $1;

    } elsif ($rec && m{^/home/\S+?\w+\.c:\d+:\d+: error: .*}) {
        push @{ $rec->{comp_errors} }, $&;

    } elsif ($rec && m{^sh: -c: line \d+: .*error}) {
        push @{ $rec->{comp_errors} }, $&;

    } elsif ($rec && /\bWARNING: (.+)/) {
        my $warning = $1;
        #warn "Found warning: $1\n";
        if (@{ $rec->{warns} } && $rec->{warns}[-1] eq $warning) {
            next;
        }

        push @{ $rec->{warns} }, $warning;

    } elsif ($rec && m{\./util/build2?\.sh (\d+\.\d+\.\d+)\b}) {
        $rec->{nginx_version} = "nginx/$1 (no pool)";

    } elsif ($rec && /^All tests successful/) {
        $rec->{tests_pass} = 1;

    } elsif ($rec && /\# Looks like you planned \d+ tests? but ran \d+\./) {

        $failure = {
            name => '',
            details => $&,
        };

        push @{ $rec->{failures} }, $failure;

    } elsif ($rec && /^Files=(\d+),\s+Tests=(\d+),\s+(\d+)\s+wallclock secs/) {

        $rec->{files} = $1;
        $rec->{tests} = $2;
        $rec->{secs} = $3;

    } elsif (/^TEST \d+: .*/) {
        $test_name = $&;

    } elsif ($rec && /^==\d+==\s+/) {
        $failure = {
            name => $test_name,
            details => $_,
        };

        push @{ $rec->{failures} }, $failure;

        #warn "Found valgrind warning: $&\n";

        $in_valgrind_warning = 1;

        $rec->{valgrind_pass} = 0;

    } elsif ($rec && /^\#\s+Failed test '(.*?)'?$/) {
        my $name = $1;
        #warn "$rec->{module}: $rec->{mode}: $name\n";
        $failure = {
            name => $name,
        };

        push @{ $rec->{failures} }, $failure;

        $in_failure = 1;

    } elsif ($rec && $in_failure && /^\# (.*)/) {
        my $s = $1;
        if ($s =~ /^\s*at .*?\w+\.pm line \d+\.$/
            || $s =~ /^\s*Looks like you failed \d+ tests of \d+\.\s*$/)
        {
            next;
        }

        $failure->{details} .= "$s\n";

    } elsif ($rec && m{^t/(\S+\.t) \.+ }) {

        my $file = $1;
        #warn "file $file\n";
        my $failures = $rec->{failures};
        my $i = @$failures - 1;
        while ($i >= 0) {
            my $f = $failures->[$i];
            if (defined $f->{file}) {
                last;
            }

            $f->{file} = $file;

            $i--;
        }
    }
}

for my $rec (@records) {
    my $mode = $rec->{mode};
    my $module = $rec->{module};

    if ($verbose) {
        print $mode, ": ", $module, ": ";
    }

    if ($rec->{comp_errors}) {
        @{ $rec->{comp_errors} } = uniq @{ $rec->{comp_errors} };
    }

    if ($rec->{tests_pass} && $rec->{valgrind_pass}) {
        if ($verbose) {
            print "\e[32mPASS\e[39m\n";
        }

        $rec->{result} = 'PASS';

        $rec->{true_fails} = [];
        $rec->{expected_fails} = [];

    } else {

        my (@fails, @expected_fails);

        my $specs = $white_list{$module};
        if ($specs) {
            for my $f (@{ $rec->{failures} }) {
                my $expected;
                for my $spec (@$specs) {
                    if ($mode =~ /$spec->[0]/) {
                        #warn "mode $mode matched $spec->[0]";
                        my $file = $spec->[1];

                        if (defined $file) {
                            if (defined $f->{file} && $f->{file} eq $file) {
                                #warn "Hit $file!";
                                my $test = $spec->[2];
                                if (defined $test) {
                                    if ($f->{name} =~ /(?:$test)|\Q$test\E/) {
                                        #warn "Matched \"$f->{name}\" with \"$test\"";
                                        $expected = 1;
                                        last;

                                    }

                                } else {
                                    #warn "Matched mode $spec->[0] and file $spec->[1]";
                                    $expected = 1;
                                    last;
                                }
                            }

                        } else {
                            #warn "Matched mode $spec->[0]";
                            $expected = 1;
                            last;
                        }
                    }
                }

                if ($expected) {
                    push @expected_fails, $f;

                } else {
                    push @fails, $f;
                }
            }

        } else {
            @fails = @{ $rec->{failures} };
        }

        $rec->{true_fails} = \@fails;
        $rec->{expected_fails} = \@expected_fails;
        delete $rec->{failures};

        if (!@fails && $rec->{tests}) {
            if ($verbose) {
                print "\e[33mPASS\e[39m\n";
            }

            $rec->{result} = '~PASS';

        } else {
            if ($verbose) {
                print "\e[31mFAIL\e[39m\n";
            }

            $rec->{result} = 'FAIL';

            if (@fails && ($module ne 'ngx_postgres' || $mode !~ /w/)) {
                if ($verbose) {
                    print join("\n", map { "@$_" } @fails), "\n";
                }
            }
        }
    }

    if (@{ $rec->{valgrind_warnings} }) {
        #print @{ $rec->{valgrind_warnings} };
    }
}

my $json_xs = JSON::XS->new->ascii->pretty;

my $res = {
    arch => $arch,
    date => $date,
    records => \@records,
};

open my $out, ">$outfile" or
    die "Cannot open $outfile for writing: $!\n";

print $out $json_xs->encode($res);

close $out;

sub usage {
    die "Usage: $0 [-v] -o <outfile> <infile>\n";
}

