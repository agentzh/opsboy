#!/usr/bin/env perl

use strict;
use warnings;

use JSON::XS;
use Template;

my $dir = shift
    or die "No input directory specified.\n";

my @jsonfiles = glob "$dir/*.json";
if (!@jsonfiles) {
    die "No JSON files found under $dir/.\n";
}

my %github_links = (
    ngx_encrypted_session => ['agentzh', 'encrypted-session-nginx-module'],
    ngx_array_var => ['agentzh', 'array-var-nginx-module'],
    ngx_drizzle => ['chaoslawful', 'drizzle-nginx-module'],
    ngx_echo => ['agentzh', 'echo-nginx-module'],
    ngx_eval => ['agentzh', 'nginx-eval-module'],
    ngx_headers_more => ['agentzh', 'headers-more-nginx-module'],
    ngx_lua => ['chaoslawful', 'lua-nginx-module'],
    ngx_memc => ['agentzh', 'memc-nginx-module'],
    ngx_postgres => ['FRiCKLE', 'ngx_postgres'],
    ngx_rds_csv => ['agentzh', 'rds-csv-nginx-module'],
    ngx_rds_json => ['agentzh', 'rds-json-nginx-module'],
    ngx_redis2 => ['agentzh', 'redis2-nginx-module'],
    ngx_set_misc => ['agentzh', 'set-misc-nginx-module'],
    ngx_srcache => ['agentzh', 'srcache-nginx-module'],
    ngx_xss => ['agentzh', 'xss-nginx-module'],
);

my $data = {
};

my $jsonxs = JSON::XS->new->ascii;

for my $jsonfile (@jsonfiles) {
    open my $in, $jsonfile
        or die "Cannot open $jsonfile for reading: $!\n";
    my $json = do { local $/; <$in> };
    close $in;

    my $ast = $jsonxs->decode($json);

    my $arch = $ast->{arch};
    my $arch_group;
    if (!defined $data->{$arch}) {
        $arch_group = {};
        $data->{$arch} = $arch_group;

    } else {
        $arch_group = $data->{$arch};
    }

    my $test_date = $ast->{date};

    my $recs = $ast->{records};
    for my $rec (@$recs) {
        my $nginx_version = $rec->{nginx_version};
        my $nginx_group;
        if (!defined $arch_group->{$nginx_version}) {
            $nginx_group = {};
            $arch_group->{$nginx_version} = $nginx_group;
        } else {
            $nginx_group = $arch_group->{$nginx_version};
        }

        my $module = $rec->{module};
        my $module_group;
        if (!defined $nginx_group->{$module}) {
            $module_group = {};
            $nginx_group->{$module} = $module_group;
        } else {
            $module_group = $nginx_group->{$module};
        }

        my $mode = $rec->{mode};
        my $mode_group;
        if (!defined $module_group->{$mode}) {
            $mode_group = {};
            $module_group->{$mode} = $mode_group;
        } else {
            $mode_group = $module_group->{$mode};
        }

        if (defined $mode_group->{test_date}
            && defined $mode_group->{commit_date})
        {
            if ($test_date lt $mode_group->{test_date}) {
                warn "Skip $arch > $nginx_version > $module > $mode ($test_date).\n";
                next;
            }

            #warn "Overriding $arch > $nginx_version > $module > $mode ($test_date later than $mode_group->{test_date})\n";
        }

        $mode_group->{test_date} = $test_date;
        $mode_group->{commit_date} = $rec->{commit_date};
        $mode_group->{result} = $rec->{result};
        $mode_group->{expected_fails} = $rec->{expected_fails};
        $mode_group->{true_fails} = $rec->{true_fails};
        $mode_group->{tests} = $rec->{tests};
        $mode_group->{files} = $rec->{files};
        $mode_group->{commit} = substr($rec->{commit}, 0, 8);
        $mode_group->{test_date} = $test_date;
        $mode_group->{elapsed} = $rec->{secs};
    }
}

my $outfile = "ast.json";
open my $out, ">$outfile"
    or die "Cannot open $outfile for writing: $!\n";
print $out $jsonxs->pretty->encode($data);
close $out;

mkdir 'html/' if ! -d 'html/';

my $tt2 = Template->new;

for my $arch_name (sort keys %$data) {
    my $arch = $data->{$arch_name};
    (my $arch_anchor = $arch_name) =~ s/[^-\w]/_/g;
    for my $ngx_ver (sort keys %$arch) {
        my $ngx = $arch->{$ngx_ver};
        (my $ngx_anchor = $ngx_ver) =~ s/[^-\w]/_/g;
        $ngx_anchor = $arch_anchor . '_' . $ngx_anchor;

        for my $module_name (sort keys %$ngx) {
            my $module = $ngx->{$module_name};

            for my $mode_name (sort keys %$module) {
                my $mode = $module->{$mode_name};

                my $link = $ngx_anchor . '_' . $module_name . '_'
                    . $mode_name . '.html';

                $mode->{link} = $link;

                my $outfile = "html/$link";
                $mode->{failures} ||= [];
                $mode->{true_fails} ||= [];

                my $github_link = $github_links{$module_name};
                if ($github_link) {
                    #warn "Found github link for $module_name\n";
                    $github_link = "github.com/$github_link->[0]/$github_link->[1]";

                } else {
                    #warn "NOT Found github link for $module_name\n";
                }

                $tt2->process('detailed.tt', {
                    name => $module_name,
                    arch => $arch_name,
                    mode => $mode_name,
                    rec => $mode,
                    github_link => $github_link,
                }, $outfile) or die $tt2->error();

                warn "wrote $outfile\n";
            }
        }

        $ngx->{anchor} = $ngx_anchor;
    }
    #warn $arch_name;
    $arch->{anchor} = $arch_anchor;
}

$outfile = "html/index.html";

$tt2->process('index.tt', { ast => $data }, 'html/index.html')
    or die $tt2->error();

warn "wrote $outfile\n";

