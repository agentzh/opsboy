#!/usr/bin/env perl

use 5.006001;
use strict;
use warnings;

use File::Spec;

my ($default_goal, $entities, $vars);
my ($check_only, $git_pull);

my (%made, %making);

sub make ($);
sub check_dir ($);
sub main ();
sub can_run ($);
sub sh (@);

my $freebsd;
if ($^O eq'freebsd') {
    $freebsd = 1;
}

my $osx;
if ($^O eq 'darwin') {
    $osx = 1;
}

my $use_dnf;
if (can_run("dnf")) {
    $use_dnf = 1;
}

my $use_yum;
if (can_run("yum")) {
    $use_yum = 1;
}

sub make ($) {
    my $target = shift;

    if ($made{$target}) {
        return;
    }

    if ($making{$target}) {
        die "Circular dependency found around $target\n";
    }

    $making{$target} = 1;

    my $rules = $entities->{$target};
    if (!$rules) {
        die "target \"$target\" not defined.\n";
    }

    my $deps = $rules->{dep};

    my $gits = $rules->{git};
    if ($gits) {
        if (!$deps) {
            $rules->{dep} = ['git'];
        } else {
            unshift @$deps, 'git';
        }
    }

    my $fetches = $rules->{fetch};
    if (defined $fetches) {
        if (!$deps) {
            $rules->{dep} = ['wget'];
        } else {
            unshift @$deps, 'wget';
        }
    }

    my $pkgs = $rules->{debuginfo};
    if ($pkgs) {
        if (!$deps) {
            $rules->{dep} = ['yum-utils'];
        } else {
            unshift @$deps, 'yum-utils';
        }
    }

    my $tarball = $rules->{tarball};
    if ($tarball) {
        if (!$deps) {
            $rules->{dep} = ['tar'];
        } else {
            unshift @$deps, 'tar';
        }
    }

    if ($deps) {
        for my $dep (@$deps) {
            make($dep);
        }
    }

    warn "making $target ...\n";

    my $envs = $rules->{env};
    if (defined $envs) {
        my @vals = @$envs;
        while (@vals) {
            my $name = shift @vals;
            if (!defined $name) {
                die "Undefined environment name.\n";
            }

            my $value = shift @vals;
            if (!defined $value) {
                die "Environment $name does not take a value.\n";
            }

            $value =~ s/\$(\w+)/defined $ENV{$1} ? $ENV{$1} : ''/ge;
            $value =~ s/^~/$ENV{HOME}/;
            #warn "Setting $name to $value\n";
            $value =~ s/`(.*?)`/my $s = `$1`; chomp $s; $s/ge;
            $ENV{$name} = $value;
        }
    }

    if ($gits) {
        if (@$gits % 2 != 0) {
            die "Bad number of arguments to the \"git\" command: ",
                scalar(@$gits);
        }

        my @args = @$gits;
        while (@args) {
            my $url = shift @args;
            my $dir = shift @args;

            $dir =~ s/^~/$ENV{HOME}/;

            my $parent;
            if ($dir =~ m{(.+/)[^/]+$}) {
                $parent = $1;
                if (!-d $parent) {
                    sh("mkdir", "-p", $parent);
                }
            }

            if (!good_git_repos($dir)) {
                if (-d $dir) {
                    system("mv $dir $dir.bak");
                }

                sh("git", "clone", $url, $dir);

            } else {
                if ($git_pull) {
                    sh("cd $dir && git reset --hard && git checkout master && git pull");
                }
            }
        }
    }

    my $requires_making;

    my $progs = $rules->{prog};
    if ($progs) {
        for my $prog (@$progs) {
            if (!can_run($prog)) {
                warn "program $prog missing.\n";
                $requires_making = 1;
                last;
            }
        }
    }

    my $tests = $rules->{test};
    if ($tests) {
        #warn "Found tests!";
        for my $test (@$tests) {
            #warn "running command $test";
            if (system($test) != 0) {
                warn "shell test failed: $test\n";
                $requires_making = 1;
                last;
            }
        }
    }

    my $runnings = $rules->{running};
    if ($runnings) {
        for my $running (@$runnings) {
            if (system("ps aux|grep '$running'|grep -v grep") != 0) {
                warn "process matching '$running' not found.\n";
                $requires_making = 1;
                last;
            }
        }
    }

    my $files = $rules->{file};
    if ($files) {
        for my $file (@$files) {
            $file =~ s/^~/$ENV{HOME}/;
            $file =~ s/\$(\w+)/defined $ENV{$1} ? $ENV{$1} : ''/eg;
            if (!-e $file) {
                $requires_making = 1;
                last;
            }
        }
    }

    if ($rules->{always}) {
        $requires_making = 1;
    }

    if ($requires_making) {
        my $pkgs = $rules->{yum};
        if ($pkgs) {
            for my $pkg (@$pkgs) {
                if ($freebsd) {
                    sh("sudo pkg_add -r $pkg");

                } elsif ($osx) {
                    sh("brew install $pkg");

                } elsif ($use_dnf) {
                    sh("sudo dnf install $pkg -y");

                } elsif ($use_yum) {
                    sh("sudo yum install $pkg -y");

                } else {
                    sh("unsupported OS for package installation");
                }
            }
        }

        $pkgs = $rules->{debuginfo};
        if ($pkgs) {
            for my $pkg (@$pkgs) {
                if ($use_dnf) {
                    sh("sudo dnf debuginfo-install $pkg -y");

                } elsif ($use_yum) {
                    sh("sudo debuginfo-install $pkg -y");

                } else {
                    sh("unsupported OS for debuginfo package installation");
                }
            }
        }

        my $cpans = $rules->{cpan};
        if ($cpans) {
            for my $cpan (@$cpans) {
                sh("sudo", "cpan", $cpan);
            }
        }

        my $cwds = $rules->{cwd};
        if (defined $cwds) {
            for my $cwd (@$cwds) {
                $cwd =~ s/^~/$ENV{HOME}/;
                if (!-d $cwd) {
                    system("mkdir -p $cwd") == 0 or die "Cannot mkdir $cwd\n";
                }
                print "cd $cwd\n";
                chdir $cwd or die "Cannot cd to $cwd\n";
            }
        }

        my $fetches = $rules->{fetch};
        if (defined $fetches) {
            for my $fetch (@$fetches) {
                $fetch =~ s/\$(\w+)/$ENV{$1}/g;
                sh('wget', '-N', $fetch);
            }
        }

        my $tarballs = $rules->{tarball};
        if (defined $tarballs) {
            for my $tarball (@$tarballs) {
                $tarball =~ s/\$(\w+)/$ENV{$1}/g;
                if ($osx) {
                    sh('tar', '-jxvf', $tarball);

                } else {
                    sh('tar', '-xvf', $tarball);
                }
            }
        }

        my $cmds = $rules->{sh};
        if ($cmds) {
            for my $cmd (@$cmds) {
                $cmd =~ s/\$(\w+)/defined $ENV{$1} ? $ENV{$1} : ''/ge;
                #warn "CMD: [$cmd]";
                sh($cmd);
            }
        }
    }

    $made{$target} = 1;
}

sub sh (@) {
    print "@_\n";

    if (!$check_only) {
        if (system(@_) != 0) {
            die "failed to run command: $?\n";
        }
    }
}

sub good_git_repos ($) {
    my $dir = shift;
    if (-d $dir && -d "$dir/.git"
        && -d "$dir/.git/refs" && -d "$dir/.git/objects") {
        #print "good git repos $dir.\n";
        return 1;
    }

    return undef;
}

sub check_dir ($) {
    my $dir = shift;
    $dir =~ s/^~/$ENV{HOME}/;
    if (-d $dir) {
        print "Directory $dir exists.\n";

    } else {
        print "Directory $dir NOT exists.\n";
    }
}

sub main () {
    my $cmd = shift @ARGV or
        die "No command specified.\n";

    while (my ($var, $val) = each %$vars) {
        $ENV{$var} = $val;
    }

    if ($cmd eq 'check') {
        $check_only = 1;

    } elsif ($cmd eq 'make') {
        undef $check_only;

    } else {
        die "unknown command: $cmd\n";
    }

    my ($keep_going, @goals);

    if (@ARGV) {
        for my $arg (@ARGV) {
            if ($arg =~ /^([A-Za-z][-\w]*)=(.*)/) {
                $ENV{$1} = $2;
                next;
            }

            if ($arg =~ /^-/) {
                if ($arg eq '--git-pull') {
                    $git_pull = 1;

                } elsif ($arg eq '-k') {
                    $keep_going = 1;

                } else {
                    die "unknown option: $arg\n";
                }

                next;
            }

            push @goals, $arg;
        }
    }

    if (!@goals) {
        push @goals, $default_goal;
    }

    my $begin = time();

    for my $goal (@goals) {
        if ($keep_going) {
            eval {
                make($goal);
            };
            if ($@) {
                warn $@;
            }

        } else {
            make($goal);
        }
    }

    my $elapsed = time() - $begin;
    warn "For total $elapsed sec elapsed.\n";
}

# check if we can run some command
sub can_run ($) {
    my ($cmd) = @_;

    #warn "can run: @_\n";
    my $_cmd = $cmd;
    return $_cmd if -x $_cmd;

    return undef if $_cmd =~ m{[\\/]};

    # FIXME: this is a hack; MSWin32 is not supported anyway
    my $path_sep = ':';

    for my $dir ((split /$path_sep/, $ENV{PATH}), '.') {
        next if $dir eq '';
        my $abs = File::Spec->catfile($dir, $_[0]);
        return $abs if -x $abs;
    }

    return undef;
}

$default_goal = 'run-caching-nameserver';

$vars = {
  'bison_version' => '3.0.4',
  'ccache_version' => '3.1.9',
  'force' => '0',
  'jobs' => '3',
  'libev_version' => '4.15',
  'luajit_branch' => 'v2.1-agentzh',
  'nginx_cc_opt' => '-O1',
  'nginx_version' => '1.7.10',
  'ngx_auth_request_version' => '0.2',
  'ngx_redis_version' => '0.3.7',
  'openresty_version' => '1.7.10.1',
  'pcre_version' => '8.33',
  'perl516_version' => '5.16.2',
  'ragel_version' => '6.9',
  'redis_version' => '3.0.2',
  'systemtap_version' => '2.5',
  'use_lua_resty_core' => '0',
  'use_stap' => '1',
  'valgrind_version' => '3.8.1'
};

$entities = {
  'ab' => {
    'prog' => [
      'ab'
    ],
    'yum' => [
      'httpd-tools'
    ]
  },
  'axel' => {
    'cwd' => [
      '/tmp'
    ],
    'dep' => [
      'cc'
    ],
    'fetch' => [
      'http://alioth.debian.org/frs/download.php/3016/axel-2.4.tar.bz2'
    ],
    'prog' => [
      'axel'
    ],
    'sh' => [
      'cd axel-2.4 && ./configure && make && sudo make install'
    ],
    'tarball' => [
      'axel-2.4.tar.bz2'
    ]
  },
  'bison' => {
    'cwd' => [
      '/tmp'
    ],
    'dep' => [
      'cc'
    ],
    'fetch' => [
      'http://ftp.gnu.org/gnu/bison/bison-$bison_version.tar.gz'
    ],
    'file' => [
      '/opt/bison/bin/bison'
    ],
    'sh' => [
      'cd bison-$bison_version/ && CC=gcc47 ./configure --prefix=/opt/bison && make -j$jobs && sudo make install'
    ],
    'tarball' => [
      'bison-$bison_version.tar.gz'
    ],
    'test' => [
      '/opt/bison/bin/bison --version|grep "$bison_version"'
    ]
  },
  'build-ngx_lua' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_lua',
      'gd-devel',
      'run-memcached',
      'run-redis',
      'run-mysql',
      'mockeagain',
      'pcrejit',
      'ndk',
      'ngx_set_misc',
      'ngx_auth_request',
      'ngx_echo',
      'ngx_memc',
      'ngx_headers_more',
      'ngx_drizzle',
      'ngx_rds_json',
      'ngx_coolkit',
      'ngx_openresty-debug'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build2.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build2.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"'
    ]
  },
  'caching-nameserver-config' => {
    'sh' => [
      'sudo wget http://agentzh.org/misc/nginx/test/caching-nameserver.conf -O /etc/named.conf',
      'sudo chmod a+r /etc/named.conf'
    ],
    'test' => [
      'grep 8.8.8.8 /etc/named.conf'
    ]
  },
  'cc' => {
    'dep' => [
      'make'
    ],
    'prog' => [
      'gcc47'
    ],
    'yum' => [
      'gcc47'
    ]
  },
  'ccache' => {
    'cwd' => [
      '/tmp'
    ],
    'fetch' => [
      'http://samba.org/ftp/ccache/ccache-$ccache_version.tar.bz2'
    ],
    'prog' => [
      'ccache'
    ],
    'sh' => [
      'cd ccache-$ccache_version && ./configure && make -j$jobs && sudo make install'
    ],
    'tarball' => [
      'ccache-$ccache_version.tar.bz2'
    ],
    'test' => [
      'ccache -V|grep -q "version $ccache_version"'
    ]
  },
  'cpan' => {
    'dep' => [
      'cc'
    ],
    'prog' => [
      'cpan'
    ],
    'yum' => [
      'perl-CPAN'
    ]
  },
  'cxx' => {
    'dep' => [
      'make'
    ],
    'prog' => [
      'g++'
    ],
    'yum' => [
      'gcc-c++'
    ]
  },
  'elfutils-devel' => {
    'file' => [
      '/usr/include/dwarf.h'
    ],
    'yum' => [
      'elfutils-devel'
    ]
  },
  'gd-devel' => {
    'file' => [
      '/usr/include/gd.h'
    ],
    'yum' => [
      'gd-devel'
    ]
  },
  'git' => {
    'prog' => [
      'git'
    ],
    'yum' => [
      'git'
    ]
  },
  'kernel-debuginfo' => {
    'debuginfo' => [
      'kernel-`uname -r`'
    ],
    'test' => [
      'ls /usr/lib/debug/lib/modules/`uname -r`/kernel/* > /dev/null 2>&1'
    ]
  },
  'libdrizzle' => {
    'cwd' => [
      '/tmp'
    ],
    'dep' => [
      'cc'
    ],
    'fetch' => [
      'http://agentzh.org/misc/nginx/drizzle7-2011.07.21.tar.gz'
    ],
    'file' => [
      '/opt/drizzle/lib/libdrizzle.so',
      '/opt/drizzle/include/libdrizzle-1.0/libdrizzle/drizzle.h'
    ],
    'sh' => [
      'cd drizzle7-2011.07.21/ && ./configure --without-server --prefix=/opt/drizzle && make libdrizzle-1.0 && sudo make install-libdrizzle-1.0'
    ],
    'tarball' => [
      'drizzle7-2011.07.21.tar.gz'
    ]
  },
  'libev' => {
    'cwd' => [
      '/tmp'
    ],
    'dep' => [
      'cxx',
      'cc'
    ],
    'fetch' => [
      'http://dist.schmorp.de/libev/Attic/libev-$libev_version.tar.gz'
    ],
    'file' => [
      '/usr/local/lib/libev.so',
      '/usr/local/include/ev.h'
    ],
    'sh' => [
      'cd libev-$libev_version && ./configure && make -j$jobs && sudo make install'
    ],
    'tarball' => [
      'libev-$libev_version.tar.gz'
    ]
  },
  'libpq' => {
    'file' => [
      '/usr/include/libpq-fe.h'
    ],
    'yum' => [
      'postgresql9-devel'
    ]
  },
  'list-moreutils' => {
    'test' => [
      'perl -MList::MoreUtils -e1'
    ],
    'yum' => [
      'perl-List-MoreUtils'
    ]
  },
  'lua-resty-core' => {
    'dep' => [
      'git',
      'lua-resty-lrucache',
      'ngx_lua'
    ],
    'git' => [
      'git://github.com/openresty/lua-resty-core.git',
      '~/git/lua-resty-core'
    ]
  },
  'lua-resty-dns' => {
    'dep' => [
      'git',
      'ngx_lua'
    ],
    'git' => [
      'git://github.com/openresty/lua-resty-dns.git',
      '~/git/lua-resty-dns'
    ]
  },
  'lua-resty-lock' => {
    'dep' => [
      'git',
      'ngx_lua'
    ],
    'git' => [
      'git://github.com/openresty/lua-resty-lock.git',
      '~/git/lua-resty-lock'
    ]
  },
  'lua-resty-logger-socket' => {
    'dep' => [
      'git',
      'ngx_lua'
    ],
    'git' => [
      'git://github.com/cloudflare/lua-resty-logger-socket.git',
      '~/git/lua-resty-logger-socket'
    ]
  },
  'lua-resty-lrucache' => {
    'dep' => [
      'git',
      'ngx_lua'
    ],
    'git' => [
      'git://github.com/openresty/lua-resty-lrucache.git',
      '~/git/lua-resty-lrucache'
    ]
  },
  'lua-resty-memcached' => {
    'dep' => [
      'git',
      'ngx_lua'
    ],
    'git' => [
      'git://github.com/openresty/lua-resty-memcached.git',
      '~/git/lua-resty-memcached'
    ]
  },
  'lua-resty-mysql' => {
    'dep' => [
      'git',
      'ngx_lua'
    ],
    'git' => [
      'git://github.com/openresty/lua-resty-mysql.git',
      '~/git/lua-resty-mysql'
    ]
  },
  'lua-resty-redis' => {
    'dep' => [
      'git',
      'ngx_lua'
    ],
    'git' => [
      'git://github.com/openresty/lua-resty-redis.git',
      '~/git/lua-resty-redis'
    ]
  },
  'lua-resty-string' => {
    'dep' => [
      'git',
      'ngx_lua'
    ],
    'git' => [
      'git://github.com/openresty/lua-resty-string.git',
      '~/git/lua-resty-string'
    ]
  },
  'lua-resty-upload' => {
    'dep' => [
      'git',
      'ngx_lua'
    ],
    'git' => [
      'git://github.com/openresty/lua-resty-upload.git',
      '~/git/lua-resty-upload'
    ]
  },
  'lua-resty-upstream-healthcheck' => {
    'dep' => [
      'git',
      'ngx_lua'
    ],
    'git' => [
      'git://github.com/openresty/lua-resty-upstream-healthcheck.git',
      '~/git/lua-resty-upstream-healthcheck'
    ]
  },
  'lua-resty-websocket' => {
    'dep' => [
      'git',
      'ngx_lua'
    ],
    'git' => [
      'git://github.com/openresty/lua-resty-websocket.git',
      '~/git/lua-resty-websocket'
    ]
  },
  'luajit' => {
    'always' => [],
    'cwd' => [
      '~/git/luajit2'
    ],
    'dep' => [
      'luajit-git'
    ],
    'sh' => [
      'sudo rm -rf /opt/luajit; git reset --hard; git checkout $luajit_branch && git merge origin/$luajit_branch && make CC=gcc47 CCDEBUG=-g XCFLAGS="-DLUAJIT_NUMMODE=2 -DLUA_USE_APICHECK -DLUA_USE_ASSERT" -B -j$jobs PREFIX=/opt/luajit && sudo make install PREFIX=/opt/luajit'
    ]
  },
  'luajit-git' => {
    'dep' => [
      'git'
    ],
    'git' => [
      'git://github.com/openresty/luajit2.git',
      '~/git/luajit2'
    ]
  },
  'luajit_sysmalloc' => {
    'always' => [],
    'cwd' => [
      '~/git/luajit2'
    ],
    'dep' => [
      'luajit-git',
      'valgrind'
    ],
    'sh' => [
      'sudo rm -rf /opt/luajit-sysm; git reset --hard; git checkout $luajit_branch && git merge origin/$luajit_branch && make CC=gcc47 CCDEBUG=-g XCFLAGS="-DLUAJIT_NUMMODE=2 -DLUAJIT_USE_VALGRIND -I/opt/valgrind/include -DLUAJIT_USE_SYSMALLOC -DLUA_USE_APICHECK -DLUA_USE_ASSERT" -B -j$jobs PREFIX=/opt/luajit-sysm && sudo make install PREFIX=/opt/luajit-sysm'
    ]
  },
  'make' => {
    'prog' => [
      'make'
    ],
    'yum' => [
      'make'
    ]
  },
  'memcached' => {
    'prog' => [
      'memcached'
    ],
    'yum' => [
      'memcached'
    ]
  },
  'mockeagain' => {
    'always' => [],
    'dep' => [
      'mockeagain-git',
      'cc'
    ],
    'sh' => [
      'cd ~/git/mockeagain && LD_PRELOAD= make'
    ]
  },
  'mockeagain-git' => {
    'dep' => [
      'git'
    ],
    'git' => [
      'git://github.com/openresty/mockeagain.git',
      '~/git/mockeagain'
    ]
  },
  'mysql' => {
    'prog' => [
      'mysqld_safe'
    ],
    'yum' => [
      'mysql',
      'mysql-server'
    ]
  },
  'named' => {
    'prog' => [
      'named'
    ],
    'yum' => [
      'caching-nameserver'
    ]
  },
  'ndk' => {
    'dep' => [
      'git'
    ],
    'git' => [
      'git://github.com/simpl/ngx_devel_kit.git',
      '~/git/ndk-nginx-module'
    ]
  },
  'nginx-devel-utils' => {
    'dep' => [
      'git',
      'no-pool-nginx',
      'ngx_openresty',
      'patch'
    ],
    'git' => [
      'git://github.com/openresty/nginx-devel-utils.git',
      '~/git/nginx-devel-utils'
    ]
  },
  'nginx-module-test' => {
    'always' => [],
    'dep' => [
      'prove',
      'test-nginx',
      'no-pool-nginx',
      'nginx-devel-utils',
      'axel',
      'perl-protocol-websocket',
      'cc',
      'openssl',
      'pcre'
    ],
    'env' => [
      'PATH',
      '$PWD/work/nginx/sbin:$HOME/git/nginx-devel-utils:$PATH'
    ]
  },
  'ngx-coolkit-build-script' => {
    'cwd' => [
      '~/git/coolkit-nginx-module/util'
    ],
    'fetch' => [
      'http://agentzh.org/misc/nginx/ngx-coolkit-build.sh'
    ],
    'file' => [
      '~/git/coolkit-nginx-module/util/build.sh'
    ],
    'sh' => [
      'mv ngx-coolkit-build.sh build.sh && chmod +x build.sh'
    ],
    'test' => [
      'test -x ~/git/coolkit-nginx-module/util/build.sh'
    ]
  },
  'ngx-postgres-build-script' => {
    'cwd' => [
      '~/git/postgres-nginx-module/util'
    ],
    'fetch' => [
      'http://agentzh.org/misc/nginx/ngx-postgres-build.sh'
    ],
    'file' => [
      '~/git/postgres-nginx-module/util/build.sh'
    ],
    'sh' => [
      'mv ngx-postgres-build.sh build.sh && chmod +x build.sh'
    ],
    'test' => [
      'test -x ~/git/postgres-nginx-module/util/build.sh'
    ]
  },
  'ngx_array_var' => {
    'dep' => [
      'git',
      'ndk'
    ],
    'git' => [
      'git://github.com/openresty/array-var-nginx-module.git',
      '~/git/array-var-nginx-module'
    ]
  },
  'ngx_auth_request' => {
    'cwd' => [
      '~/work/nginx'
    ],
    'fetch' => [
      'http://mdounin.ru/files/ngx_http_auth_request_module-$ngx_auth_request_version.tar.gz'
    ],
    'file' => [
      '~/work/nginx/ngx_http_auth_request_module-$ngx_auth_request_version'
    ],
    'tarball' => [
      'ngx_http_auth_request_module-$ngx_auth_request_version.tar.gz'
    ]
  },
  'ngx_coolkit' => {
    'dep' => [
      'git'
    ],
    'git' => [
      'git://github.com/FRiCKLE/ngx_coolkit.git',
      '~/git/coolkit-nginx-module'
    ]
  },
  'ngx_drizzle' => {
    'dep' => [
      'git',
      'libdrizzle'
    ],
    'env' => [
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib'
    ],
    'git' => [
      'git://github.com/openresty/drizzle-nginx-module.git',
      '~/git/drizzle-nginx-module'
    ]
  },
  'ngx_echo' => {
    'dep' => [
      'git'
    ],
    'git' => [
      'git://github.com/openresty/echo-nginx-module.git',
      '~/git/echo-nginx-module'
    ]
  },
  'ngx_encrypted_session' => {
    'dep' => [
      'git',
      'ndk'
    ],
    'git' => [
      'git://github.com/openresty/encrypted-session-nginx-module.git',
      '~/git/encrypted-session-nginx-module'
    ]
  },
  'ngx_eval' => {
    'dep' => [
      'git'
    ],
    'git' => [
      'git://github.com/openresty/nginx-eval-module.git',
      '~/git/eval-nginx-module'
    ]
  },
  'ngx_example_lua' => {
    'dep' => [
      'git',
      'ngx_lua'
    ],
    'env' => [
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`'
    ],
    'git' => [
      'git://github.com/agentzh/nginx-example-lua-module.git',
      '~/git/example-lua-nginx-module'
    ]
  },
  'ngx_form_input' => {
    'dep' => [
      'git',
      'ndk'
    ],
    'git' => [
      'git://github.com/calio/form-input-nginx-module',
      '~/git/form-input-nginx-module'
    ]
  },
  'ngx_headers_more' => {
    'dep' => [
      'git'
    ],
    'git' => [
      'git://github.com/openresty/headers-more-nginx-module.git',
      '~/git/headers-more-nginx-module'
    ]
  },
  'ngx_iconv' => {
    'dep' => [
      'git',
      'ndk'
    ],
    'git' => [
      'git://github.com/calio/iconv-nginx-module',
      '~/git/iconv-nginx-module'
    ]
  },
  'ngx_lua' => {
    'dep' => [
      'git',
      'luajit',
      'ndk'
    ],
    'env' => [
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`'
    ],
    'git' => [
      'git://github.com/openresty/lua-nginx-module.git',
      '~/git/lua-nginx-module'
    ]
  },
  'ngx_lua_upstream' => {
    'dep' => [
      'git',
      'ngx_lua'
    ],
    'env' => [
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`'
    ],
    'git' => [
      'git://github.com/openresty/lua-upstream-nginx-module.git',
      '~/git/lua-upstream-nginx-module'
    ]
  },
  'ngx_memc' => {
    'dep' => [
      'git',
      'ragel'
    ],
    'git' => [
      'git://github.com/openresty/memc-nginx-module.git',
      '~/git/memc-nginx-module'
    ]
  },
  'ngx_openresty' => {
    'dep' => [
      'git'
    ],
    'git' => [
      'git://github.com/openresty/ngx_openresty.git',
      '~/git/ngx_openresty'
    ]
  },
  'ngx_openresty-debug' => {
    'cwd' => [
      '/tmp'
    ],
    'dep' => [
      'libdrizzle',
      'openssl',
      'pcre',
      'valgrind'
    ],
    'fetch' => [
      'http://agentzh.org/misc/nginx/ngx_openresty-$openresty_version.tar.gz'
    ],
    'file' => [
      '/usr/local/openresty-debug/luajit/lib/libluajit-5.1.so',
      '/usr/local/openresty-debug/nginx/sbin/nginx'
    ],
    'sh' => [
      'cd ngx_openresty-$openresty_version && ./configure --with-cc=gcc47 --with-cc-opt="$nginx_cc_opt" --prefix=/usr/local/openresty-debug --with-luajit --with-http_drizzle_module --with-libdrizzle=/opt/drizzle --with-http_iconv_module -j$jobs --with-debug --with-luajit-xcflags="-DLUAJIT_USE_VALGRIND -I/opt/valgrind/include" && make -j$jobs && sudo make install'
    ],
    'tarball' => [
      'ngx_openresty-$openresty_version.tar.gz'
    ],
    'test' => [
      '/usr/local/openresty-debug/nginx/sbin/nginx -V 2>&1 |grep "$openresty_version$"'
    ]
  },
  'ngx_postgres' => {
    'dep' => [
      'git',
      'libpq'
    ],
    'env' => [
      'LIBPQ_INC',
      '/usr/include',
      'LIBPQ_LIB',
      '/usr/lib64'
    ],
    'git' => [
      'git://github.com/FRiCKLE/ngx_postgres.git',
      '~/git/postgres-nginx-module'
    ]
  },
  'ngx_rds_csv' => {
    'dep' => [
      'git'
    ],
    'git' => [
      'git://github.com/openresty/rds-csv-nginx-module.git',
      '~/git/rds-csv-nginx-module'
    ]
  },
  'ngx_rds_json' => {
    'dep' => [
      'git'
    ],
    'git' => [
      'git://github.com/openresty/rds-json-nginx-module.git',
      '~/git/rds-json-nginx-module'
    ]
  },
  'ngx_redis' => {
    'cwd' => [
      '~/work/nginx'
    ],
    'fetch' => [
      'http://people.freebsd.org/~osa/ngx_http_redis-$ngx_redis_version.tar.gz'
    ],
    'file' => [
      '~/work/nginx/ngx_http_redis-$ngx_redis_version'
    ],
    'tarball' => [
      'ngx_http_redis-$ngx_redis_version.tar.gz'
    ]
  },
  'ngx_redis2' => {
    'dep' => [
      'git',
      'ragel'
    ],
    'git' => [
      'git://github.com/openresty/redis2-nginx-module.git',
      '~/git/redis2-nginx-module'
    ]
  },
  'ngx_replace_filter' => {
    'dep' => [
      'git'
    ],
    'git' => [
      'git://github.com/openresty/replace-filter-nginx-module.git',
      '~/git/replace-filter-nginx-module'
    ]
  },
  'ngx_set_misc' => {
    'dep' => [
      'git'
    ],
    'git' => [
      'git://github.com/openresty/set-misc-nginx-module',
      '~/git/set-misc-nginx-module'
    ]
  },
  'ngx_srcache' => {
    'dep' => [
      'git',
      'ndk',
      'ngx_set_misc',
      'ngx_redis',
      'ngx_xss',
      'ngx_redis2',
      'ngx_eval',
      'ngx_echo',
      'ngx_headers_more',
      'ngx_lua',
      'ngx_rds_json',
      'ngx_drizzle',
      'ngx_postgres',
      'ngx_memc'
    ],
    'git' => [
      'git://github.com/openresty/srcache-nginx-module.git',
      '~/git/srcache-nginx-module'
    ]
  },
  'ngx_xss' => {
    'dep' => [
      'git',
      'ragel'
    ],
    'git' => [
      'git://github.com/openresty/xss-nginx-module.git',
      '~/git/xss-nginx-module'
    ]
  },
  'no-pool-nginx' => {
    'dep' => [
      'git',
      'patch'
    ],
    'git' => [
      'git://github.com/openresty/no-pool-nginx.git',
      '~/git/no-pool-nginx'
    ]
  },
  'openssl' => {
    'file' => [
      '/usr/include/openssl/md5.h'
    ],
    'yum' => [
      'openssl-devel'
    ]
  },
  'opsboy' => {
    'dep' => [
      'git',
      'cc',
      'pegex',
      'tt2'
    ],
    'git' => [
      'git://github.com/openresty/opsboy.git',
      '~/git/opsboy'
    ]
  },
  'parse-recdescent' => {
    'test' => [
      'perl -MParse::RecDescent -e1'
    ],
    'yum' => [
      'perl-Parse-RecDescent'
    ]
  },
  'patch' => {
    'prog' => [
      'patch'
    ],
    'yum' => [
      'patch'
    ]
  },
  'pcre' => {
    'prog' => [
      'pcre-config'
    ],
    'yum' => [
      'pcre-devel'
    ]
  },
  'pcrejit' => {
    'cwd' => [
      '/tmp'
    ],
    'env' => [
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include'
    ],
    'fetch' => [
      'http://linux.stanford.edu/pub/exim/pcre/pcre-$pcre_version.tar.bz2'
    ],
    'file' => [
      '/opt/pcrejit/lib/libpcre.so',
      '/opt/pcrejit/include/pcre.h'
    ],
    'sh' => [
      'cd pcre-$pcre_version && CFLAGS="-g -O" CXXFLAGS="-g -O" ./configure --enable-jit --enable-utf8 --prefix=/opt/pcrejit && make -j$jobs && sudo make install'
    ],
    'tarball' => [
      'pcre-$pcre_version.tar.gz'
    ],
    'test' => [
      '/opt/pcrejit/bin/pcre-config --version|grep "$pcre_version"'
    ]
  },
  'pegex' => {
    'sh' => [
      'echo y|sudo cpan -i Pegex'
    ],
    'test' => [
      'perl -MPegex -e1'
    ]
  },
  'perl-IPC-Run' => {
    'test' => [
      'perl -MIPC::Run -e1'
    ],
    'yum' => [
      'perl-IPC-Run'
    ]
  },
  'perl-IPC-Run3' => {
    'test' => [
      'perl -MIPC::Run3 -e1'
    ],
    'yum' => [
      'perl-IPC-Run3'
    ]
  },
  'perl-http-response' => {
    'cpan' => [
      'HTTP::Response'
    ],
    'dep' => [
      'cpan'
    ],
    'test' => [
      'perl -MHTTP::Response -e1'
    ]
  },
  'perl-protocol-websocket' => {
    'cpan' => [
      'Protocol::WebSocket'
    ],
    'dep' => [
      'cpan'
    ],
    'test' => [
      'perl -MProtocol::WebSocket -e1'
    ]
  },
  'perl516' => {
    'cwd' => [
      '/tmp'
    ],
    'dep' => [
      'cc'
    ],
    'fetch' => [
      'http://www.cpan.org/src/5.0/perl-$perl516_version.tar.gz'
    ],
    'file' => [
      '/opt/perl516/bin/perl'
    ],
    'sh' => [
      'cd perl-$perl516_version && sh Configure -Dcc=gcc47 -Dprefix=/opt/perl516 -des && make -j$jobs && sudo make install'
    ],
    'tarball' => [
      'perl-$perl516_version.tar.gz'
    ],
    'test' => [
      '/opt/perl516/bin/perl -v|grep "$perl516_version"'
    ]
  },
  'perl516-IPC-Run3' => {
    'dep' => [
      'perl516'
    ],
    'sh' => [
      'echo y|sudo /opt/perl516/bin/cpan -i IPC::Run3'
    ],
    'test' => [
      '/opt/perl516/bin/perl -MIPC::Run3 -e1'
    ]
  },
  'perl516-Test-Base' => {
    'dep' => [
      'perl516'
    ],
    'sh' => [
      'echo y|sudo /opt/perl516/bin/cpan -i Test::Base'
    ],
    'test' => [
      '/opt/perl516/bin/perl -e "require(q{Test/Base.pm});"'
    ]
  },
  'perl516-Test-Differences' => {
    'dep' => [
      'perl516'
    ],
    'sh' => [
      'echo y|sudo /opt/perl516/bin/cpan -i Test::Differences'
    ],
    'test' => [
      '/opt/perl516/bin/perl -MTest::Differences -e1'
    ]
  },
  'perl516-Test-LongString' => {
    'dep' => [
      'perl516'
    ],
    'sh' => [
      'echo y|sudo /opt/perl516/bin/cpan -i Test::LongString'
    ],
    'test' => [
      '/opt/perl516/bin/perl -MTest::LongString -e1'
    ]
  },
  'postgres' => {
    'prog' => [
      'pg_ctl'
    ],
    'yum' => [
      'postgresql-server'
    ]
  },
  'prove' => {
    'prog' => [
      'prove'
    ],
    'yum' => [
      'perl-Test-Harness'
    ]
  },
  'python' => {
    'prog' => [
      'python'
    ],
    'yum' => [
      'python'
    ]
  },
  'ragel' => {
    'cwd' => [
      '/tmp'
    ],
    'dep' => [
      'cxx'
    ],
    'fetch' => [
      'http://www.colm.net/files/ragel/ragel-$ragel_version.tar.gz'
    ],
    'prog' => [
      'ragel'
    ],
    'sh' => [
      'cd ragel-$ragel_version && ./configure && make -j$jobs && sudo make install'
    ],
    'tarball' => [
      'ragel-$ragel_version.tar.gz'
    ],
    'test' => [
      'ragel -v|grep "$ragel_version"'
    ]
  },
  'redis' => {
    'cwd' => [
      '/tmp'
    ],
    'dep' => [
      'cc'
    ],
    'fetch' => [
      'http://download.redis.io/releases/redis-$redis_version.tar.gz'
    ],
    'prog' => [
      'redis-server'
    ],
    'sh' => [
      'cd redis-$redis_version/ && ARCH= make -j$jobs && ARCH= sudo make install'
    ],
    'tarball' => [
      'redis-$redis_version.tar.gz'
    ],
    'test' => [
      'redis-server -v|grep $redis_version'
    ]
  },
  'resty-cli' => {
    'dep' => [
      'git',
      'ngx_lua',
      'perl-IPC-Run',
      'test-longstring',
      'test-base',
      'text-diff'
    ],
    'git' => [
      'git://github.com/openresty/resty-cli.git',
      '~/git/resty-cli'
    ]
  },
  'run-caching-nameserver' => {
    'dep' => [
      'named',
      'caching-nameserver-config'
    ],
    'running' => [
      '/named -u '
    ],
    'sh' => [
      'sudo service named start'
    ]
  },
  'run-memcached' => {
    'dep' => [
      'memcached'
    ],
    'running' => [
      'memcached -d -p 11211'
    ],
    'sh' => [
      'memcached -d -p 11211 -l 127.0.0.1'
    ]
  },
  'run-mysql' => {
    'dep' => [
      'mysql'
    ],
    'running' => [
      'mysqld --'
    ],
    'sh' => [
      'sudo service mysqld start || (sleep 10 && sudo service mysqld start)'
    ]
  },
  'run-postgres' => {
    'dep' => [
      'run-postgres2'
    ],
    'running' => [
      'postgres: writer process'
    ],
    'sh' => [
      'sudo service postgresql start || (sleep 10 && sudo service postgresql start) || sudo service postgresql initdb'
    ]
  },
  'run-postgres2' => {
    'dep' => [
      'postgres'
    ],
    'running' => [
      'postgres: writer process'
    ],
    'sh' => [
      'sudo service postgresql start || (sleep 10 && sudo service postgresql start) || sudo service postgresql initdb'
    ]
  },
  'run-redis' => {
    'dep' => [
      'redis'
    ],
    'running' => [
      'redis-server -'
    ],
    'sh' => [
      '(echo "daemonize yes"; echo "loglevel warning")|redis-server -'
    ]
  },
  'sregex' => {
    'always' => [],
    'dep' => [
      'sregex-git',
      'cc',
      'bison',
      'ngx_openresty-debug',
      'perl516-IPC-Run3',
      'perl516-Test-LongString',
      'perl516-Test-Base',
      'perl516',
      'perl516-Test-Differences'
    ],
    'env' => [
      'PATH',
      '/usr/local/openresty-debug/luajit/bin:/opt/bison/bin:$PATH'
    ],
    'sh' => [
      'cd ~/git/sregex && make -j$jobs || make clean all'
    ]
  },
  'sregex-git' => {
    'dep' => [
      'git'
    ],
    'git' => [
      'git://github.com/openresty/sregex.git',
      '~/git/sregex'
    ]
  },
  'stap' => {
    'cwd' => [
      '/tmp'
    ],
    'dep' => [
      'cc',
      'elfutils-devel'
    ],
    'env' => [
      'PATH',
      '/opt/systemtap/bin:$PATH'
    ],
    'fetch' => [
      'http://sourceware.org/systemtap/ftp/releases/systemtap-$systemtap_version.tar.gz'
    ],
    'file' => [
      '/opt/systemtap/bin/stap'
    ],
    'sh' => [
      'cd systemtap-$systemtap_version && ./configure --prefix=/opt/systemtap --disable-docs --disable-publican --disable-refdocs && make -j$jobs && sudo rm -rf /opt/systemtap && sudo make install'
    ],
    'tarball' => [
      'systemtap-$systemtap_version.tar.gz'
    ],
    'test' => [
      '/opt/systemtap/bin/stap --version 2>&1 | grep "version $systemtap_version"'
    ]
  },
  'stapdev-grp' => {
    'sh' => [
      'sudo usermod -a -G stapdev `whoami`'
    ],
    'test' => [
      'groups `whoami`|grep stapdev > /dev/null'
    ]
  },
  'stapusr-grp' => {
    'sh' => [
      'sudo usermod -a -G stapusr `whoami`'
    ],
    'test' => [
      'groups `whoami`|grep stapusr > /dev/null'
    ]
  },
  'systemtap' => {
    'dep' => [
      'stap',
      'kernel-debuginfo',
      'stapusr-grp',
      'stapdev-grp'
    ]
  },
  't' => {
    'dep' => [
      't-ngx_array_var',
      't-ngx_redis2',
      't-ngx_lua',
      't-ngx_srcache',
      't-ngx_memc',
      't-ngx_set_misc',
      't-ngx_xss',
      't-ngx_drizzle',
      't-ngx_rds_json',
      't-ngx_echo',
      't-ngx_postgres',
      't-ngx_eval',
      't-ngx_headers_more',
      't-ngx_rds_csv',
      't-ngx_encrypted_session',
      't-ngx_form_input',
      't-ngx_coolkit',
      't-ngx_iconv',
      't-ngx_example_lua',
      't-ngx_lua_upstream',
      't-ngx_replace_filter',
      't-lua-resty-memcached',
      't-lua-resty-redis',
      't-lua-resty-mysql',
      't-lua-resty-string',
      't-lua-resty-upload',
      't-lua-resty-dns',
      't-lua-resty-websocket',
      't-lua-resty-lock',
      't-lua-resty-logger-socket',
      't-lua-resty-core',
      't-lua-resty-upstream-healthcheck',
      't-lua-resty-lrucache',
      't-sregex',
      't-resty-cli'
    ]
  },
  't-lua-resty-core' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-core'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-lua-resty-dns' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-dns'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-dns',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-lua-resty-lock' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-lock'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-lock',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-lua-resty-logger-socket' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-logger-socket'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-logger-socket',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-lua-resty-lrucache' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-lrucache'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-lrucache',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-lua-resty-memcached' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-memcached'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-memcached',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-lua-resty-mysql' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-mysql'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-mysql',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_MYSQL_PATH',
      '/var/lib/mysql/mysql.sock'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-lua-resty-redis' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-redis'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-redis',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-lua-resty-string' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-string'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-string',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-lua-resty-upload' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-upload'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-upload',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-lua-resty-upstream-healthcheck' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-upstream-healthcheck'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-upstream-healthcheck',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-lua-resty-websocket' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-websocket'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-websocket',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-ngx_array_var' => {
    'always' => [],
    'cwd' => [
      '~/git/array-var-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_array_var',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc'
    ],
    'env' => [
      'PATH',
      '~/git/array-var-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-ngx_coolkit' => {
    'always' => [],
    'cwd' => [
      '~/git/coolkit-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_coolkit',
      'gd-devel',
      'ngx-coolkit-build-script',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua',
      'ngx_rds_json'
    ],
    'env' => [
      'PATH',
      '~/git/coolkit-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-ngx_drizzle' => {
    'always' => [],
    'cwd' => [
      '~/git/drizzle-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_drizzle',
      'gd-devel',
      'run-mysql',
      'ngx_lua',
      'ngx_echo',
      'ngx_rds_json',
      'ngx_headers_more',
      'ndk',
      'ngx_set_misc'
    ],
    'env' => [
      'PATH',
      '~/git/drizzle-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-ngx_echo' => {
    'always' => [],
    'cwd' => [
      '~/git/echo-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_echo',
      'gd-devel',
      'ndk',
      'ngx_set_misc',
      'ngx_eval',
      'ngx_xss',
      'ngx_rds_json',
      'ngx_headers_more',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/echo-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-ngx_encrypted_session' => {
    'always' => [],
    'cwd' => [
      '~/git/encrypted-session-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_encrypted_session',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/encrypted-session-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-ngx_eval' => {
    'always' => [],
    'cwd' => [
      '~/git/eval-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_eval',
      'gd-devel',
      'run-memcached',
      'ngx_echo',
      'ngx_memc'
    ],
    'env' => [
      'PATH',
      '~/git/eval-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-ngx_example_lua' => {
    'always' => [],
    'cwd' => [
      '~/git/example-lua-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_example_lua',
      'gd-devel',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/example-lua-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-ngx_form_input' => {
    'always' => [],
    'cwd' => [
      '~/git/form-input-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_form_input',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var'
    ],
    'env' => [
      'PATH',
      '~/git/form-input-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-ngx_headers_more' => {
    'always' => [],
    'cwd' => [
      '~/git/headers-more-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_headers_more',
      'gd-devel',
      'ngx_eval',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/headers-more-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-ngx_iconv' => {
    'always' => [],
    'cwd' => [
      '~/git/iconv-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_iconv',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua',
      'ngx_rds_json'
    ],
    'env' => [
      'PATH',
      '~/git/iconv-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-ngx_lua' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_lua',
      'gd-devel',
      'run-memcached',
      'run-redis',
      'run-mysql',
      'mockeagain',
      'pcrejit',
      'ndk',
      'ngx_set_misc',
      'ngx_auth_request',
      'ngx_echo',
      'ngx_memc',
      'ngx_headers_more',
      'ngx_drizzle',
      'ngx_srcache',
      'ngx_rds_json',
      'ngx_coolkit',
      'ngx_redis2',
      'ngx_lua_upstream',
      'lua-resty-core',
      'ngx_openresty-debug'
    ],
    'env' => [
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build2.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build2.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-ngx_lua_upstream' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-upstream-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_lua_upstream',
      'gd-devel',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-upstream-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-ngx_memc' => {
    'always' => [],
    'cwd' => [
      '~/git/memc-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_memc',
      'gd-devel',
      'run-memcached',
      'ndk',
      'ngx_eval',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/memc-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-ngx_postgres' => {
    'always' => [],
    'cwd' => [
      '~/git/postgres-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_postgres',
      'gd-devel',
      'ngx-postgres-build-script',
      'ngx_echo',
      'ngx_lua',
      'ngx_eval',
      'ngx_rds_json',
      'ndk',
      'ngx_set_misc',
      'ngx_form_input',
      'ngx_coolkit',
      'ngx_auth_request',
      'run-postgres'
    ],
    'env' => [
      'PATH',
      '~/git/postgres-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-ngx_rds_csv' => {
    'always' => [],
    'cwd' => [
      '~/git/rds-csv-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_rds_csv',
      'gd-devel',
      'run-mysql',
      'run-postgres',
      'ngx_eval',
      'ngx_echo',
      'ngx_xss',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var',
      'ngx_drizzle',
      'ngx_form_input',
      'ngx_postgres'
    ],
    'env' => [
      'PATH',
      '~/git/rds-csv-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-ngx_rds_json' => {
    'always' => [],
    'cwd' => [
      '~/git/rds-json-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_rds_json',
      'gd-devel',
      'run-mysql',
      'run-postgres',
      'ngx_drizzle',
      'ngx_eval',
      'ngx_echo',
      'ngx_xss',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var',
      'ngx_form_input',
      'ngx_postgres'
    ],
    'env' => [
      'PATH',
      '~/git/rds-json-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-ngx_redis2' => {
    'always' => [],
    'cwd' => [
      '~/git/redis2-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_redis2',
      'gd-devel',
      'run-redis',
      'ndk',
      'ngx_eval',
      'ngx_echo',
      'ngx_set_misc',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/redis2-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-ngx_replace_filter' => {
    'always' => [],
    'cwd' => [
      '~/git/replace-filter-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_replace_filter',
      'gd-devel',
      'sregex',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'SREGEX_INC',
      '~/git/sregex/src',
      'SREGEX_LIB',
      '~/git/sregex',
      'PATH',
      '~/git/replace-filter-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-ngx_set_misc' => {
    'always' => [],
    'cwd' => [
      '~/git/set-misc-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_set_misc',
      'gd-devel',
      'ndk',
      'ngx_echo',
      'ngx_iconv'
    ],
    'env' => [
      'PATH',
      '~/git/set-misc-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-ngx_srcache' => {
    'always' => [],
    'cwd' => [
      '~/git/srcache-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_srcache',
      'gd-devel',
      'run-memcached',
      'run-redis',
      'run-mysql',
      'run-postgres'
    ],
    'env' => [
      'PATH',
      '~/git/srcache-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-ngx_xss' => {
    'always' => [],
    'cwd' => [
      '~/git/xss-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_xss',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/xss-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-resty-cli' => {
    'always' => [],
    'cwd' => [
      '~/git/resty-cli'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'resty-cli',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_RESTY_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  't-sregex' => {
    'always' => [],
    'cwd' => [
      '~/git/sregex'
    ],
    'dep' => [
      'sregex'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'PATH=/opt/perl516/bin:$PATH make test -j$jobs'
    ]
  },
  'tar' => {
    'prog' => [
      'tar'
    ],
    'yum' => [
      'install',
      'tar'
    ]
  },
  'test-base' => {
    'dep' => [
      'text-diff'
    ],
    'test' => [
      'perl -e "require(q{Test/Base.pm});"'
    ],
    'yum' => [
      'perl-Test-Base'
    ]
  },
  'test-longstring' => {
    'cpan' => [
      'Test::LongString'
    ],
    'dep' => [
      'cpan'
    ],
    'test' => [
      'perl -MTest::LongString -e1'
    ]
  },
  'test-nginx' => {
    'dep' => [
      'git',
      'test-base',
      'time-hires',
      'test-longstring',
      'list-moreutils',
      'perl-http-response',
      'ab',
      'weighttp'
    ],
    'git' => [
      'git://github.com/openresty/test-nginx.git',
      '~/git/test-nginx'
    ]
  },
  'text-diff' => {
    'test' => [
      'perl -MText::Diff -e1'
    ],
    'yum' => [
      'perl-Text-Diff'
    ]
  },
  'th' => {
    'dep' => [
      'th-ngx_array_var',
      'th-ngx_redis2',
      'th-ngx_lua',
      'th-ngx_srcache',
      'th-ngx_memc',
      'th-ngx_set_misc',
      'th-ngx_xss',
      'th-ngx_drizzle',
      'th-ngx_rds_json',
      'th-ngx_echo',
      'th-ngx_postgres',
      'th-ngx_eval',
      'th-ngx_headers_more',
      'th-ngx_rds_csv',
      'th-ngx_encrypted_session',
      'th-ngx_form_input',
      'th-ngx_coolkit',
      'th-ngx_iconv',
      'th-ngx_example_lua',
      'th-ngx_lua_upstream',
      'th-ngx_replace_filter',
      'th-lua-resty-memcached',
      'th-lua-resty-redis',
      'th-lua-resty-mysql',
      'th-lua-resty-string',
      'th-lua-resty-upload',
      'th-lua-resty-dns',
      'th-lua-resty-websocket',
      'th-lua-resty-lock',
      'th-lua-resty-logger-socket',
      'th-lua-resty-core',
      'th-lua-resty-upstream-healthcheck',
      'th-lua-resty-lrucache'
    ]
  },
  'th-lua-resty-core' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-core'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-lua-resty-dns' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-dns'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-dns',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-lua-resty-lock' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-lock'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-lock',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-lua-resty-logger-socket' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-logger-socket'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-logger-socket',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-lua-resty-lrucache' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-lrucache'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-lrucache',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-lua-resty-memcached' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-memcached'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-memcached',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-lua-resty-mysql' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-mysql'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-mysql',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_MYSQL_PATH',
      '/var/lib/mysql/mysql.sock'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-lua-resty-redis' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-redis'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-redis',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-lua-resty-string' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-string'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-string',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-lua-resty-upload' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-upload'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-upload',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-lua-resty-upstream-healthcheck' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-upstream-healthcheck'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-upstream-healthcheck',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-lua-resty-websocket' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-websocket'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-websocket',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-ngx_array_var' => {
    'always' => [],
    'cwd' => [
      '~/git/array-var-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_array_var',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc'
    ],
    'env' => [
      'PATH',
      '~/git/array-var-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-ngx_coolkit' => {
    'always' => [],
    'cwd' => [
      '~/git/coolkit-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_coolkit',
      'gd-devel',
      'ngx-coolkit-build-script',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua',
      'ngx_rds_json'
    ],
    'env' => [
      'PATH',
      '~/git/coolkit-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-ngx_drizzle' => {
    'always' => [],
    'cwd' => [
      '~/git/drizzle-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_drizzle',
      'gd-devel',
      'run-mysql',
      'ngx_lua',
      'ngx_echo',
      'ngx_rds_json',
      'ngx_headers_more',
      'ndk',
      'ngx_set_misc'
    ],
    'env' => [
      'PATH',
      '~/git/drizzle-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-ngx_echo' => {
    'always' => [],
    'cwd' => [
      '~/git/echo-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_echo',
      'gd-devel',
      'ndk',
      'ngx_set_misc',
      'ngx_eval',
      'ngx_xss',
      'ngx_rds_json',
      'ngx_headers_more',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/echo-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-ngx_encrypted_session' => {
    'always' => [],
    'cwd' => [
      '~/git/encrypted-session-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_encrypted_session',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/encrypted-session-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-ngx_eval' => {
    'always' => [],
    'cwd' => [
      '~/git/eval-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_eval',
      'gd-devel',
      'run-memcached',
      'ngx_echo',
      'ngx_memc'
    ],
    'env' => [
      'PATH',
      '~/git/eval-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-ngx_example_lua' => {
    'always' => [],
    'cwd' => [
      '~/git/example-lua-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_example_lua',
      'gd-devel',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/example-lua-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-ngx_form_input' => {
    'always' => [],
    'cwd' => [
      '~/git/form-input-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_form_input',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var'
    ],
    'env' => [
      'PATH',
      '~/git/form-input-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-ngx_headers_more' => {
    'always' => [],
    'cwd' => [
      '~/git/headers-more-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_headers_more',
      'gd-devel',
      'ngx_eval',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/headers-more-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-ngx_iconv' => {
    'always' => [],
    'cwd' => [
      '~/git/iconv-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_iconv',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua',
      'ngx_rds_json'
    ],
    'env' => [
      'PATH',
      '~/git/iconv-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-ngx_lua' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_lua',
      'gd-devel',
      'run-memcached',
      'run-redis',
      'run-mysql',
      'mockeagain',
      'pcrejit',
      'ndk',
      'ngx_set_misc',
      'ngx_auth_request',
      'ngx_echo',
      'ngx_memc',
      'ngx_headers_more',
      'ngx_drizzle',
      'ngx_srcache',
      'ngx_rds_json',
      'ngx_coolkit',
      'ngx_redis2',
      'ngx_lua_upstream',
      'lua-resty-core',
      'ngx_openresty-debug'
    ],
    'env' => [
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build2.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build2.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-ngx_lua_upstream' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-upstream-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_lua_upstream',
      'gd-devel',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-upstream-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-ngx_memc' => {
    'always' => [],
    'cwd' => [
      '~/git/memc-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_memc',
      'gd-devel',
      'run-memcached',
      'ndk',
      'ngx_eval',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/memc-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-ngx_postgres' => {
    'always' => [],
    'cwd' => [
      '~/git/postgres-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_postgres',
      'gd-devel',
      'ngx-postgres-build-script',
      'ngx_echo',
      'ngx_lua',
      'ngx_eval',
      'ngx_rds_json',
      'ndk',
      'ngx_set_misc',
      'ngx_form_input',
      'ngx_coolkit',
      'ngx_auth_request',
      'run-postgres'
    ],
    'env' => [
      'PATH',
      '~/git/postgres-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-ngx_rds_csv' => {
    'always' => [],
    'cwd' => [
      '~/git/rds-csv-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_rds_csv',
      'gd-devel',
      'run-mysql',
      'run-postgres',
      'ngx_eval',
      'ngx_echo',
      'ngx_xss',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var',
      'ngx_drizzle',
      'ngx_form_input',
      'ngx_postgres'
    ],
    'env' => [
      'PATH',
      '~/git/rds-csv-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-ngx_rds_json' => {
    'always' => [],
    'cwd' => [
      '~/git/rds-json-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_rds_json',
      'gd-devel',
      'run-mysql',
      'run-postgres',
      'ngx_drizzle',
      'ngx_eval',
      'ngx_echo',
      'ngx_xss',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var',
      'ngx_form_input',
      'ngx_postgres'
    ],
    'env' => [
      'PATH',
      '~/git/rds-json-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-ngx_redis2' => {
    'always' => [],
    'cwd' => [
      '~/git/redis2-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_redis2',
      'gd-devel',
      'run-redis',
      'ndk',
      'ngx_eval',
      'ngx_echo',
      'ngx_set_misc',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/redis2-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-ngx_replace_filter' => {
    'always' => [],
    'cwd' => [
      '~/git/replace-filter-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_replace_filter',
      'gd-devel',
      'sregex',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'SREGEX_INC',
      '~/git/sregex/src',
      'SREGEX_LIB',
      '~/git/sregex',
      'PATH',
      '~/git/replace-filter-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-ngx_set_misc' => {
    'always' => [],
    'cwd' => [
      '~/git/set-misc-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_set_misc',
      'gd-devel',
      'ndk',
      'ngx_echo',
      'ngx_iconv'
    ],
    'env' => [
      'PATH',
      '~/git/set-misc-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-ngx_srcache' => {
    'always' => [],
    'cwd' => [
      '~/git/srcache-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_srcache',
      'gd-devel',
      'run-memcached',
      'run-redis',
      'run-mysql',
      'run-postgres'
    ],
    'env' => [
      'PATH',
      '~/git/srcache-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'th-ngx_xss' => {
    'always' => [],
    'cwd' => [
      '~/git/xss-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_xss',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/xss-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv' => {
    'dep' => [
      'thv-ngx_array_var',
      'thv-ngx_redis2',
      'thv-ngx_lua',
      'thv-ngx_srcache',
      'thv-ngx_memc',
      'thv-ngx_set_misc',
      'thv-ngx_xss',
      'thv-ngx_drizzle',
      'thv-ngx_rds_json',
      'thv-ngx_echo',
      'thv-ngx_postgres',
      'thv-ngx_eval',
      'thv-ngx_headers_more',
      'thv-ngx_rds_csv',
      'thv-ngx_encrypted_session',
      'thv-ngx_form_input',
      'thv-ngx_coolkit',
      'thv-ngx_iconv',
      'thv-ngx_example_lua',
      'thv-ngx_lua_upstream',
      'thv-ngx_replace_filter',
      'thv-lua-resty-memcached',
      'thv-lua-resty-redis',
      'thv-lua-resty-mysql',
      'thv-lua-resty-string',
      'thv-lua-resty-upload',
      'thv-lua-resty-dns',
      'thv-lua-resty-websocket',
      'thv-lua-resty-lock',
      'thv-lua-resty-logger-socket',
      'thv-lua-resty-core',
      'thv-lua-resty-upstream-healthcheck',
      'thv-lua-resty-lrucache'
    ]
  },
  'thv-lua-resty-core' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-core'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-lua-resty-dns' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-dns'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-dns',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-lua-resty-lock' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-lock'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-lock',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-lua-resty-logger-socket' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-logger-socket'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-logger-socket',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-lua-resty-lrucache' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-lrucache'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-lrucache',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-lua-resty-memcached' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-memcached'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-memcached',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-lua-resty-mysql' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-mysql'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-mysql',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_MYSQL_PATH',
      '/var/lib/mysql/mysql.sock'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-lua-resty-redis' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-redis'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-redis',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-lua-resty-string' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-string'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-string',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-lua-resty-upload' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-upload'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-upload',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-lua-resty-upstream-healthcheck' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-upstream-healthcheck'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-upstream-healthcheck',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-lua-resty-websocket' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-websocket'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-websocket',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-ngx_array_var' => {
    'always' => [],
    'cwd' => [
      '~/git/array-var-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_array_var',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc'
    ],
    'env' => [
      'PATH',
      '~/git/array-var-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-ngx_coolkit' => {
    'always' => [],
    'cwd' => [
      '~/git/coolkit-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_coolkit',
      'gd-devel',
      'ngx-coolkit-build-script',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua',
      'ngx_rds_json'
    ],
    'env' => [
      'PATH',
      '~/git/coolkit-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-ngx_drizzle' => {
    'always' => [],
    'cwd' => [
      '~/git/drizzle-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_drizzle',
      'gd-devel',
      'run-mysql',
      'ngx_lua',
      'ngx_echo',
      'ngx_rds_json',
      'ngx_headers_more',
      'ndk',
      'ngx_set_misc'
    ],
    'env' => [
      'PATH',
      '~/git/drizzle-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-ngx_echo' => {
    'always' => [],
    'cwd' => [
      '~/git/echo-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_echo',
      'gd-devel',
      'ndk',
      'ngx_set_misc',
      'ngx_eval',
      'ngx_xss',
      'ngx_rds_json',
      'ngx_headers_more',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/echo-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-ngx_encrypted_session' => {
    'always' => [],
    'cwd' => [
      '~/git/encrypted-session-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_encrypted_session',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/encrypted-session-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-ngx_eval' => {
    'always' => [],
    'cwd' => [
      '~/git/eval-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_eval',
      'gd-devel',
      'run-memcached',
      'ngx_echo',
      'ngx_memc'
    ],
    'env' => [
      'PATH',
      '~/git/eval-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-ngx_example_lua' => {
    'always' => [],
    'cwd' => [
      '~/git/example-lua-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_example_lua',
      'gd-devel',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/example-lua-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-ngx_form_input' => {
    'always' => [],
    'cwd' => [
      '~/git/form-input-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_form_input',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var'
    ],
    'env' => [
      'PATH',
      '~/git/form-input-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-ngx_headers_more' => {
    'always' => [],
    'cwd' => [
      '~/git/headers-more-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_headers_more',
      'gd-devel',
      'ngx_eval',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/headers-more-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-ngx_iconv' => {
    'always' => [],
    'cwd' => [
      '~/git/iconv-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_iconv',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua',
      'ngx_rds_json'
    ],
    'env' => [
      'PATH',
      '~/git/iconv-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-ngx_lua' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_lua',
      'gd-devel',
      'run-memcached',
      'run-redis',
      'run-mysql',
      'mockeagain',
      'pcrejit',
      'ndk',
      'ngx_set_misc',
      'ngx_auth_request',
      'ngx_echo',
      'ngx_memc',
      'ngx_headers_more',
      'ngx_drizzle',
      'ngx_srcache',
      'ngx_rds_json',
      'ngx_coolkit',
      'ngx_redis2',
      'ngx_lua_upstream',
      'lua-resty-core',
      'ngx_openresty-debug'
    ],
    'env' => [
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build2.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build2.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-ngx_lua_upstream' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-upstream-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_lua_upstream',
      'gd-devel',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-upstream-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-ngx_memc' => {
    'always' => [],
    'cwd' => [
      '~/git/memc-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_memc',
      'gd-devel',
      'run-memcached',
      'ndk',
      'ngx_eval',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/memc-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-ngx_postgres' => {
    'always' => [],
    'cwd' => [
      '~/git/postgres-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_postgres',
      'gd-devel',
      'ngx-postgres-build-script',
      'ngx_echo',
      'ngx_lua',
      'ngx_eval',
      'ngx_rds_json',
      'ndk',
      'ngx_set_misc',
      'ngx_form_input',
      'ngx_coolkit',
      'ngx_auth_request',
      'run-postgres'
    ],
    'env' => [
      'PATH',
      '~/git/postgres-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-ngx_rds_csv' => {
    'always' => [],
    'cwd' => [
      '~/git/rds-csv-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_rds_csv',
      'gd-devel',
      'run-mysql',
      'run-postgres',
      'ngx_eval',
      'ngx_echo',
      'ngx_xss',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var',
      'ngx_drizzle',
      'ngx_form_input',
      'ngx_postgres'
    ],
    'env' => [
      'PATH',
      '~/git/rds-csv-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-ngx_rds_json' => {
    'always' => [],
    'cwd' => [
      '~/git/rds-json-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_rds_json',
      'gd-devel',
      'run-mysql',
      'run-postgres',
      'ngx_drizzle',
      'ngx_eval',
      'ngx_echo',
      'ngx_xss',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var',
      'ngx_form_input',
      'ngx_postgres'
    ],
    'env' => [
      'PATH',
      '~/git/rds-json-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-ngx_redis2' => {
    'always' => [],
    'cwd' => [
      '~/git/redis2-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_redis2',
      'gd-devel',
      'run-redis',
      'ndk',
      'ngx_eval',
      'ngx_echo',
      'ngx_set_misc',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/redis2-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-ngx_replace_filter' => {
    'always' => [],
    'cwd' => [
      '~/git/replace-filter-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_replace_filter',
      'gd-devel',
      'sregex',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'SREGEX_INC',
      '~/git/sregex/src',
      'SREGEX_LIB',
      '~/git/sregex',
      'PATH',
      '~/git/replace-filter-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-ngx_set_misc' => {
    'always' => [],
    'cwd' => [
      '~/git/set-misc-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_set_misc',
      'gd-devel',
      'ndk',
      'ngx_echo',
      'ngx_iconv'
    ],
    'env' => [
      'PATH',
      '~/git/set-misc-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-ngx_srcache' => {
    'always' => [],
    'cwd' => [
      '~/git/srcache-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_srcache',
      'gd-devel',
      'run-memcached',
      'run-redis',
      'run-mysql',
      'run-postgres'
    ],
    'env' => [
      'PATH',
      '~/git/srcache-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'thv-ngx_xss' => {
    'always' => [],
    'cwd' => [
      '~/git/xss-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_xss',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/xss-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '1',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'time-hires' => {
    'test' => [
      'perl -MTime::HiRes -e1'
    ],
    'yum' => [
      'perl-Time-HiRes'
    ]
  },
  'tl' => {
    'dep' => [
      'tl-ngx_array_var',
      'tl-ngx_redis2',
      'tl-ngx_lua',
      'tl-ngx_srcache',
      'tl-ngx_memc',
      'tl-ngx_set_misc',
      'tl-ngx_xss',
      'tl-ngx_drizzle',
      'tl-ngx_rds_json',
      'tl-ngx_echo',
      'tl-ngx_postgres',
      'tl-ngx_eval',
      'tl-ngx_headers_more',
      'tl-ngx_rds_csv',
      'tl-ngx_encrypted_session',
      'tl-ngx_form_input',
      'tl-ngx_coolkit',
      'tl-ngx_iconv',
      'tl-ngx_example_lua',
      'tl-ngx_lua_upstream',
      'tl-ngx_replace_filter',
      'tl-lua-resty-memcached',
      'tl-lua-resty-redis',
      'tl-lua-resty-mysql',
      'tl-lua-resty-string',
      'tl-lua-resty-upload',
      'tl-lua-resty-dns',
      'tl-lua-resty-websocket',
      'tl-lua-resty-lock',
      'tl-lua-resty-logger-socket',
      'tl-lua-resty-core',
      'tl-lua-resty-upstream-healthcheck',
      'tl-lua-resty-lrucache'
    ]
  },
  'tl-lua-resty-core' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-core'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-lua-resty-dns' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-dns'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-dns',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-lua-resty-lock' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-lock'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-lock',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-lua-resty-logger-socket' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-logger-socket'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-logger-socket',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-lua-resty-lrucache' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-lrucache'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-lrucache',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-lua-resty-memcached' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-memcached'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-memcached',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-lua-resty-mysql' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-mysql'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-mysql',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_MYSQL_PATH',
      '/var/lib/mysql/mysql.sock'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-lua-resty-redis' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-redis'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-redis',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-lua-resty-string' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-string'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-string',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-lua-resty-upload' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-upload'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-upload',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-lua-resty-upstream-healthcheck' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-upstream-healthcheck'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-upstream-healthcheck',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-lua-resty-websocket' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-websocket'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-websocket',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-ngx_array_var' => {
    'always' => [],
    'cwd' => [
      '~/git/array-var-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_array_var',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc'
    ],
    'env' => [
      'PATH',
      '~/git/array-var-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-ngx_coolkit' => {
    'always' => [],
    'cwd' => [
      '~/git/coolkit-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_coolkit',
      'gd-devel',
      'ngx-coolkit-build-script',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua',
      'ngx_rds_json'
    ],
    'env' => [
      'PATH',
      '~/git/coolkit-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-ngx_drizzle' => {
    'always' => [],
    'cwd' => [
      '~/git/drizzle-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_drizzle',
      'gd-devel',
      'run-mysql',
      'ngx_lua',
      'ngx_echo',
      'ngx_rds_json',
      'ngx_headers_more',
      'ndk',
      'ngx_set_misc'
    ],
    'env' => [
      'PATH',
      '~/git/drizzle-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-ngx_echo' => {
    'always' => [],
    'cwd' => [
      '~/git/echo-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_echo',
      'gd-devel',
      'ndk',
      'ngx_set_misc',
      'ngx_eval',
      'ngx_xss',
      'ngx_rds_json',
      'ngx_headers_more',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/echo-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-ngx_encrypted_session' => {
    'always' => [],
    'cwd' => [
      '~/git/encrypted-session-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_encrypted_session',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/encrypted-session-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-ngx_eval' => {
    'always' => [],
    'cwd' => [
      '~/git/eval-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_eval',
      'gd-devel',
      'run-memcached',
      'ngx_echo',
      'ngx_memc'
    ],
    'env' => [
      'PATH',
      '~/git/eval-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-ngx_example_lua' => {
    'always' => [],
    'cwd' => [
      '~/git/example-lua-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_example_lua',
      'gd-devel',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/example-lua-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-ngx_form_input' => {
    'always' => [],
    'cwd' => [
      '~/git/form-input-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_form_input',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var'
    ],
    'env' => [
      'PATH',
      '~/git/form-input-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-ngx_headers_more' => {
    'always' => [],
    'cwd' => [
      '~/git/headers-more-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_headers_more',
      'gd-devel',
      'ngx_eval',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/headers-more-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-ngx_iconv' => {
    'always' => [],
    'cwd' => [
      '~/git/iconv-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_iconv',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua',
      'ngx_rds_json'
    ],
    'env' => [
      'PATH',
      '~/git/iconv-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-ngx_lua' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_lua',
      'gd-devel',
      'run-memcached',
      'run-redis',
      'run-mysql',
      'mockeagain',
      'pcrejit',
      'ndk',
      'ngx_set_misc',
      'ngx_auth_request',
      'ngx_echo',
      'ngx_memc',
      'ngx_headers_more',
      'ngx_drizzle',
      'ngx_srcache',
      'ngx_rds_json',
      'ngx_coolkit',
      'ngx_redis2',
      'ngx_lua_upstream',
      'lua-resty-core',
      'ngx_openresty-debug'
    ],
    'env' => [
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build2.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build2.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-ngx_lua_upstream' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-upstream-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_lua_upstream',
      'gd-devel',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-upstream-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-ngx_memc' => {
    'always' => [],
    'cwd' => [
      '~/git/memc-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_memc',
      'gd-devel',
      'run-memcached',
      'ndk',
      'ngx_eval',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/memc-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-ngx_postgres' => {
    'always' => [],
    'cwd' => [
      '~/git/postgres-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_postgres',
      'gd-devel',
      'ngx-postgres-build-script',
      'ngx_echo',
      'ngx_lua',
      'ngx_eval',
      'ngx_rds_json',
      'ndk',
      'ngx_set_misc',
      'ngx_form_input',
      'ngx_coolkit',
      'ngx_auth_request',
      'run-postgres'
    ],
    'env' => [
      'PATH',
      '~/git/postgres-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-ngx_rds_csv' => {
    'always' => [],
    'cwd' => [
      '~/git/rds-csv-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_rds_csv',
      'gd-devel',
      'run-mysql',
      'run-postgres',
      'ngx_eval',
      'ngx_echo',
      'ngx_xss',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var',
      'ngx_drizzle',
      'ngx_form_input',
      'ngx_postgres'
    ],
    'env' => [
      'PATH',
      '~/git/rds-csv-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-ngx_rds_json' => {
    'always' => [],
    'cwd' => [
      '~/git/rds-json-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_rds_json',
      'gd-devel',
      'run-mysql',
      'run-postgres',
      'ngx_drizzle',
      'ngx_eval',
      'ngx_echo',
      'ngx_xss',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var',
      'ngx_form_input',
      'ngx_postgres'
    ],
    'env' => [
      'PATH',
      '~/git/rds-json-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-ngx_redis2' => {
    'always' => [],
    'cwd' => [
      '~/git/redis2-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_redis2',
      'gd-devel',
      'run-redis',
      'ndk',
      'ngx_eval',
      'ngx_echo',
      'ngx_set_misc',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/redis2-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-ngx_replace_filter' => {
    'always' => [],
    'cwd' => [
      '~/git/replace-filter-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_replace_filter',
      'gd-devel',
      'sregex',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'SREGEX_INC',
      '~/git/sregex/src',
      'SREGEX_LIB',
      '~/git/sregex',
      'PATH',
      '~/git/replace-filter-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-ngx_set_misc' => {
    'always' => [],
    'cwd' => [
      '~/git/set-misc-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_set_misc',
      'gd-devel',
      'ndk',
      'ngx_echo',
      'ngx_iconv'
    ],
    'env' => [
      'PATH',
      '~/git/set-misc-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-ngx_srcache' => {
    'always' => [],
    'cwd' => [
      '~/git/srcache-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_srcache',
      'gd-devel',
      'run-memcached',
      'run-redis',
      'run-mysql',
      'run-postgres'
    ],
    'env' => [
      'PATH',
      '~/git/srcache-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tl-ngx_xss' => {
    'always' => [],
    'cwd' => [
      '~/git/xss-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_xss',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/xss-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '1',
      'LD_LIBRARY_PATH',
      '/usr/local/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to' => {
    'dep' => [
      'to-ngx_array_var',
      'to-ngx_redis2',
      'to-ngx_lua',
      'to-ngx_srcache',
      'to-ngx_memc',
      'to-ngx_set_misc',
      'to-ngx_xss',
      'to-ngx_drizzle',
      'to-ngx_rds_json',
      'to-ngx_echo',
      'to-ngx_postgres',
      'to-ngx_eval',
      'to-ngx_headers_more',
      'to-ngx_rds_csv',
      'to-ngx_encrypted_session',
      'to-ngx_form_input',
      'to-ngx_coolkit',
      'to-ngx_iconv',
      'to-ngx_example_lua',
      'to-ngx_lua_upstream',
      'to-ngx_replace_filter'
    ]
  },
  'to-lua-resty-core' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-core'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-lua-resty-dns' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-dns'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-dns',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-lua-resty-lock' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-lock'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-lock',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-lua-resty-logger-socket' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-logger-socket'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-logger-socket',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-lua-resty-lrucache' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-lrucache'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-lrucache',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-lua-resty-memcached' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-memcached'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-memcached',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-lua-resty-mysql' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-mysql'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-mysql',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_MYSQL_PATH',
      '/var/lib/mysql/mysql.sock'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-lua-resty-redis' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-redis'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-redis',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-lua-resty-string' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-string'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-string',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-lua-resty-upload' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-upload'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-upload',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-lua-resty-upstream-healthcheck' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-upstream-healthcheck'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-upstream-healthcheck',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-lua-resty-websocket' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-websocket'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-websocket',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-ngx_array_var' => {
    'always' => [],
    'cwd' => [
      '~/git/array-var-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_array_var',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc'
    ],
    'env' => [
      'PATH',
      '~/git/array-var-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-ngx_coolkit' => {
    'always' => [],
    'cwd' => [
      '~/git/coolkit-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_coolkit',
      'gd-devel',
      'ngx-coolkit-build-script',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua',
      'ngx_rds_json'
    ],
    'env' => [
      'PATH',
      '~/git/coolkit-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-ngx_drizzle' => {
    'always' => [],
    'cwd' => [
      '~/git/drizzle-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_drizzle',
      'gd-devel',
      'run-mysql',
      'ngx_lua',
      'ngx_echo',
      'ngx_rds_json',
      'ngx_headers_more',
      'ndk',
      'ngx_set_misc'
    ],
    'env' => [
      'PATH',
      '~/git/drizzle-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-ngx_echo' => {
    'always' => [],
    'cwd' => [
      '~/git/echo-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_echo',
      'gd-devel',
      'ndk',
      'ngx_set_misc',
      'ngx_eval',
      'ngx_xss',
      'ngx_rds_json',
      'ngx_headers_more',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/echo-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-ngx_encrypted_session' => {
    'always' => [],
    'cwd' => [
      '~/git/encrypted-session-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_encrypted_session',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/encrypted-session-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-ngx_eval' => {
    'always' => [],
    'cwd' => [
      '~/git/eval-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_eval',
      'gd-devel',
      'run-memcached',
      'ngx_echo',
      'ngx_memc'
    ],
    'env' => [
      'PATH',
      '~/git/eval-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-ngx_example_lua' => {
    'always' => [],
    'cwd' => [
      '~/git/example-lua-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_example_lua',
      'gd-devel',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/example-lua-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-ngx_form_input' => {
    'always' => [],
    'cwd' => [
      '~/git/form-input-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_form_input',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var'
    ],
    'env' => [
      'PATH',
      '~/git/form-input-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-ngx_headers_more' => {
    'always' => [],
    'cwd' => [
      '~/git/headers-more-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_headers_more',
      'gd-devel',
      'ngx_eval',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/headers-more-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-ngx_iconv' => {
    'always' => [],
    'cwd' => [
      '~/git/iconv-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_iconv',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua',
      'ngx_rds_json'
    ],
    'env' => [
      'PATH',
      '~/git/iconv-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-ngx_lua' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_lua',
      'gd-devel',
      'run-memcached',
      'run-redis',
      'run-mysql',
      'mockeagain',
      'pcrejit',
      'ndk',
      'ngx_set_misc',
      'ngx_auth_request',
      'ngx_echo',
      'ngx_memc',
      'ngx_headers_more',
      'ngx_drizzle',
      'ngx_srcache',
      'ngx_rds_json',
      'ngx_coolkit',
      'ngx_redis2',
      'ngx_lua_upstream',
      'lua-resty-core',
      'ngx_openresty-debug'
    ],
    'env' => [
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build2.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build2.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-ngx_lua_upstream' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-upstream-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_lua_upstream',
      'gd-devel',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-upstream-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-ngx_memc' => {
    'always' => [],
    'cwd' => [
      '~/git/memc-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_memc',
      'gd-devel',
      'run-memcached',
      'ndk',
      'ngx_eval',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/memc-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-ngx_postgres' => {
    'always' => [],
    'cwd' => [
      '~/git/postgres-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_postgres',
      'gd-devel',
      'ngx-postgres-build-script',
      'ngx_echo',
      'ngx_lua',
      'ngx_eval',
      'ngx_rds_json',
      'ndk',
      'ngx_set_misc',
      'ngx_form_input',
      'ngx_coolkit',
      'ngx_auth_request',
      'run-postgres'
    ],
    'env' => [
      'PATH',
      '~/git/postgres-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-ngx_rds_csv' => {
    'always' => [],
    'cwd' => [
      '~/git/rds-csv-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_rds_csv',
      'gd-devel',
      'run-mysql',
      'run-postgres',
      'ngx_eval',
      'ngx_echo',
      'ngx_xss',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var',
      'ngx_drizzle',
      'ngx_form_input',
      'ngx_postgres'
    ],
    'env' => [
      'PATH',
      '~/git/rds-csv-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-ngx_rds_json' => {
    'always' => [],
    'cwd' => [
      '~/git/rds-json-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_rds_json',
      'gd-devel',
      'run-mysql',
      'run-postgres',
      'ngx_drizzle',
      'ngx_eval',
      'ngx_echo',
      'ngx_xss',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var',
      'ngx_form_input',
      'ngx_postgres'
    ],
    'env' => [
      'PATH',
      '~/git/rds-json-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-ngx_redis2' => {
    'always' => [],
    'cwd' => [
      '~/git/redis2-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_redis2',
      'gd-devel',
      'run-redis',
      'ndk',
      'ngx_eval',
      'ngx_echo',
      'ngx_set_misc',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/redis2-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-ngx_replace_filter' => {
    'always' => [],
    'cwd' => [
      '~/git/replace-filter-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_replace_filter',
      'gd-devel',
      'sregex',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'SREGEX_INC',
      '~/git/sregex/src',
      'SREGEX_LIB',
      '~/git/sregex',
      'PATH',
      '~/git/replace-filter-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-ngx_set_misc' => {
    'always' => [],
    'cwd' => [
      '~/git/set-misc-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_set_misc',
      'gd-devel',
      'ndk',
      'ngx_echo',
      'ngx_iconv'
    ],
    'env' => [
      'PATH',
      '~/git/set-misc-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-ngx_srcache' => {
    'always' => [],
    'cwd' => [
      '~/git/srcache-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_srcache',
      'gd-devel',
      'run-memcached',
      'run-redis',
      'run-mysql',
      'run-postgres'
    ],
    'env' => [
      'PATH',
      '~/git/srcache-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'to-ngx_xss' => {
    'always' => [],
    'cwd' => [
      '~/git/xss-nginx-module'
    ],
    'dep' => [
      'ccache',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_xss',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/xss-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '-O3 -funsigned-char',
      'NGX_BUILD_NO_DEBUG',
      '1',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      ''
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr' => {
    'dep' => [
      'tr-ngx_redis2',
      'tr-ngx_lua',
      'tr-ngx_srcache',
      'tr-ngx_memc',
      'tr-ngx_drizzle',
      'tr-ngx_rds_json',
      'tr-ngx_echo',
      'tr-ngx_postgres',
      'tr-ngx_eval',
      'tr-ngx_rds_csv',
      'tr-ngx_form_input',
      'tr-ngx_iconv',
      'tr-ngx_replace_filter',
      'tr-lua-resty-memcached',
      'tr-lua-resty-redis',
      'tr-lua-resty-mysql',
      'tr-lua-resty-string',
      'tr-lua-resty-upload',
      'tr-lua-resty-dns',
      'tr-lua-resty-websocket',
      'tr-lua-resty-lock',
      'tr-lua-resty-logger-socket',
      'tr-lua-resty-core',
      'tr-lua-resty-upstream-healthcheck',
      'tr-lua-resty-lrucache'
    ]
  },
  'tr-lua-resty-core' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-core'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-lua-resty-dns' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-dns'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-dns',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-lua-resty-lock' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-lock'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-lock',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-lua-resty-logger-socket' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-logger-socket'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-logger-socket',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-lua-resty-lrucache' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-lrucache'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-lrucache',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-lua-resty-memcached' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-memcached'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-memcached',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-lua-resty-mysql' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-mysql'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-mysql',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r',
      'TEST_NGINX_MYSQL_PATH',
      '/var/lib/mysql/mysql.sock'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-lua-resty-redis' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-redis'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-redis',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-lua-resty-string' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-string'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-string',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-lua-resty-upload' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-upload'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-upload',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-lua-resty-upstream-healthcheck' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-upstream-healthcheck'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-upstream-healthcheck',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-lua-resty-websocket' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-websocket'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-websocket',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-ngx_coolkit' => {
    'always' => [],
    'cwd' => [
      '~/git/coolkit-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_coolkit',
      'gd-devel',
      'ngx-coolkit-build-script',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua',
      'ngx_rds_json'
    ],
    'env' => [
      'PATH',
      '~/git/coolkit-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-ngx_drizzle' => {
    'always' => [],
    'cwd' => [
      '~/git/drizzle-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_drizzle',
      'gd-devel',
      'run-mysql',
      'ngx_lua',
      'ngx_echo',
      'ngx_rds_json',
      'ngx_headers_more',
      'ndk',
      'ngx_set_misc'
    ],
    'env' => [
      'PATH',
      '~/git/drizzle-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-ngx_echo' => {
    'always' => [],
    'cwd' => [
      '~/git/echo-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_echo',
      'gd-devel',
      'ndk',
      'ngx_set_misc',
      'ngx_eval',
      'ngx_xss',
      'ngx_rds_json',
      'ngx_headers_more',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/echo-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-ngx_eval' => {
    'always' => [],
    'cwd' => [
      '~/git/eval-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_eval',
      'gd-devel',
      'run-memcached',
      'ngx_echo',
      'ngx_memc'
    ],
    'env' => [
      'PATH',
      '~/git/eval-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-ngx_form_input' => {
    'always' => [],
    'cwd' => [
      '~/git/form-input-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_form_input',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var'
    ],
    'env' => [
      'PATH',
      '~/git/form-input-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-ngx_iconv' => {
    'always' => [],
    'cwd' => [
      '~/git/iconv-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_iconv',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua',
      'ngx_rds_json'
    ],
    'env' => [
      'PATH',
      '~/git/iconv-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-ngx_lua' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_lua',
      'gd-devel',
      'run-memcached',
      'run-redis',
      'run-mysql',
      'mockeagain',
      'pcrejit',
      'ndk',
      'ngx_set_misc',
      'ngx_auth_request',
      'ngx_echo',
      'ngx_memc',
      'ngx_headers_more',
      'ngx_drizzle',
      'ngx_srcache',
      'ngx_rds_json',
      'ngx_coolkit',
      'ngx_redis2',
      'ngx_lua_upstream',
      'lua-resty-core',
      'ngx_openresty-debug'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build2.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build2.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-ngx_memc' => {
    'always' => [],
    'cwd' => [
      '~/git/memc-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_memc',
      'gd-devel',
      'run-memcached',
      'ndk',
      'ngx_eval',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/memc-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-ngx_postgres' => {
    'always' => [],
    'cwd' => [
      '~/git/postgres-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_postgres',
      'gd-devel',
      'ngx-postgres-build-script',
      'ngx_echo',
      'ngx_lua',
      'ngx_eval',
      'ngx_rds_json',
      'ndk',
      'ngx_set_misc',
      'ngx_form_input',
      'ngx_coolkit',
      'ngx_auth_request',
      'run-postgres'
    ],
    'env' => [
      'PATH',
      '~/git/postgres-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-ngx_rds_csv' => {
    'always' => [],
    'cwd' => [
      '~/git/rds-csv-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_rds_csv',
      'gd-devel',
      'run-mysql',
      'run-postgres',
      'ngx_eval',
      'ngx_echo',
      'ngx_xss',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var',
      'ngx_drizzle',
      'ngx_form_input',
      'ngx_postgres'
    ],
    'env' => [
      'PATH',
      '~/git/rds-csv-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-ngx_rds_json' => {
    'always' => [],
    'cwd' => [
      '~/git/rds-json-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_rds_json',
      'gd-devel',
      'run-mysql',
      'run-postgres',
      'ngx_drizzle',
      'ngx_eval',
      'ngx_echo',
      'ngx_xss',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var',
      'ngx_form_input',
      'ngx_postgres'
    ],
    'env' => [
      'PATH',
      '~/git/rds-json-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-ngx_redis2' => {
    'always' => [],
    'cwd' => [
      '~/git/redis2-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_redis2',
      'gd-devel',
      'run-redis',
      'ndk',
      'ngx_eval',
      'ngx_echo',
      'ngx_set_misc',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/redis2-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-ngx_replace_filter' => {
    'always' => [],
    'cwd' => [
      '~/git/replace-filter-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_replace_filter',
      'gd-devel',
      'sregex',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'SREGEX_INC',
      '~/git/sregex/src',
      'SREGEX_LIB',
      '~/git/sregex',
      'PATH',
      '~/git/replace-filter-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tr-ngx_srcache' => {
    'always' => [],
    'cwd' => [
      '~/git/srcache-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_srcache',
      'gd-devel',
      'run-memcached',
      'run-redis',
      'run-mysql',
      'run-postgres'
    ],
    'env' => [
      'PATH',
      '~/git/srcache-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv' => {
    'dep' => [
      'trv1',
      'trv2'
    ]
  },
  'trv-lua-resty-core' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-core'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-lua-resty-dns' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-dns'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-dns',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-lua-resty-lock' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-lock'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-lock',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-lua-resty-logger-socket' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-logger-socket'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-logger-socket',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-lua-resty-lrucache' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-lrucache'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-lrucache',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-lua-resty-memcached' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-memcached'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-memcached',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-lua-resty-mysql' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-mysql'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-mysql',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r',
      'TEST_NGINX_MYSQL_PATH',
      '/var/lib/mysql/mysql.sock'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-lua-resty-redis' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-redis'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-redis',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-lua-resty-string' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-string'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-string',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-lua-resty-upload' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-upload'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-upload',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-lua-resty-upstream-healthcheck' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-upstream-healthcheck'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-upstream-healthcheck',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-lua-resty-websocket' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-websocket'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-websocket',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-ngx_coolkit' => {
    'always' => [],
    'cwd' => [
      '~/git/coolkit-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_coolkit',
      'gd-devel',
      'ngx-coolkit-build-script',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua',
      'ngx_rds_json'
    ],
    'env' => [
      'PATH',
      '~/git/coolkit-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-ngx_drizzle' => {
    'always' => [],
    'cwd' => [
      '~/git/drizzle-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_drizzle',
      'gd-devel',
      'run-mysql',
      'ngx_lua',
      'ngx_echo',
      'ngx_rds_json',
      'ngx_headers_more',
      'ndk',
      'ngx_set_misc'
    ],
    'env' => [
      'PATH',
      '~/git/drizzle-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-ngx_echo' => {
    'always' => [],
    'cwd' => [
      '~/git/echo-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_echo',
      'gd-devel',
      'ndk',
      'ngx_set_misc',
      'ngx_eval',
      'ngx_xss',
      'ngx_rds_json',
      'ngx_headers_more',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/echo-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-ngx_eval' => {
    'always' => [],
    'cwd' => [
      '~/git/eval-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_eval',
      'gd-devel',
      'run-memcached',
      'ngx_echo',
      'ngx_memc'
    ],
    'env' => [
      'PATH',
      '~/git/eval-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-ngx_form_input' => {
    'always' => [],
    'cwd' => [
      '~/git/form-input-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_form_input',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var'
    ],
    'env' => [
      'PATH',
      '~/git/form-input-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-ngx_iconv' => {
    'always' => [],
    'cwd' => [
      '~/git/iconv-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_iconv',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua',
      'ngx_rds_json'
    ],
    'env' => [
      'PATH',
      '~/git/iconv-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-ngx_lua' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_lua',
      'gd-devel',
      'run-memcached',
      'run-redis',
      'run-mysql',
      'mockeagain',
      'pcrejit',
      'ndk',
      'ngx_set_misc',
      'ngx_auth_request',
      'ngx_echo',
      'ngx_memc',
      'ngx_headers_more',
      'ngx_drizzle',
      'ngx_srcache',
      'ngx_rds_json',
      'ngx_coolkit',
      'ngx_redis2',
      'ngx_lua_upstream',
      'lua-resty-core',
      'ngx_openresty-debug'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build2.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build2.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-ngx_memc' => {
    'always' => [],
    'cwd' => [
      '~/git/memc-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_memc',
      'gd-devel',
      'run-memcached',
      'ndk',
      'ngx_eval',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/memc-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-ngx_postgres' => {
    'always' => [],
    'cwd' => [
      '~/git/postgres-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_postgres',
      'gd-devel',
      'ngx-postgres-build-script',
      'ngx_echo',
      'ngx_lua',
      'ngx_eval',
      'ngx_rds_json',
      'ndk',
      'ngx_set_misc',
      'ngx_form_input',
      'ngx_coolkit',
      'ngx_auth_request',
      'run-postgres'
    ],
    'env' => [
      'PATH',
      '~/git/postgres-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-ngx_rds_csv' => {
    'always' => [],
    'cwd' => [
      '~/git/rds-csv-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_rds_csv',
      'gd-devel',
      'run-mysql',
      'run-postgres',
      'ngx_eval',
      'ngx_echo',
      'ngx_xss',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var',
      'ngx_drizzle',
      'ngx_form_input',
      'ngx_postgres'
    ],
    'env' => [
      'PATH',
      '~/git/rds-csv-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-ngx_rds_json' => {
    'always' => [],
    'cwd' => [
      '~/git/rds-json-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_rds_json',
      'gd-devel',
      'run-mysql',
      'run-postgres',
      'ngx_drizzle',
      'ngx_eval',
      'ngx_echo',
      'ngx_xss',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var',
      'ngx_form_input',
      'ngx_postgres'
    ],
    'env' => [
      'PATH',
      '~/git/rds-json-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-ngx_redis2' => {
    'always' => [],
    'cwd' => [
      '~/git/redis2-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_redis2',
      'gd-devel',
      'run-redis',
      'ndk',
      'ngx_eval',
      'ngx_echo',
      'ngx_set_misc',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/redis2-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-ngx_replace_filter' => {
    'always' => [],
    'cwd' => [
      '~/git/replace-filter-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_replace_filter',
      'gd-devel',
      'sregex',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'SREGEX_INC',
      '~/git/sregex/src',
      'SREGEX_LIB',
      '~/git/sregex',
      'PATH',
      '~/git/replace-filter-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv-ngx_srcache' => {
    'always' => [],
    'cwd' => [
      '~/git/srcache-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_srcache',
      'gd-devel',
      'run-memcached',
      'run-redis',
      'run-mysql',
      'run-postgres'
    ],
    'env' => [
      'PATH',
      '~/git/srcache-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'MOCKEAGAIN',
      'r'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'trv1' => {
    'dep' => [
      'trv-ngx_redis2',
      'trv-ngx_lua',
      'trv-lua-resty-memcached',
      'trv-lua-resty-redis',
      'trv-lua-resty-mysql',
      'trv-lua-resty-string',
      'trv-lua-resty-upload',
      'trv-lua-resty-dns',
      'trv-lua-resty-websocket',
      'trv-lua-resty-lock',
      'trv-lua-resty-logger-socket',
      'trv-lua-resty-core',
      'trv-lua-resty-upstream-healthcheck',
      'trv-lua-resty-lrucache'
    ]
  },
  'trv2' => {
    'dep' => [
      'trv-ngx_srcache',
      'trv-ngx_memc',
      'trv-ngx_drizzle',
      'trv-ngx_rds_json',
      'trv-ngx_echo',
      'trv-ngx_postgres',
      'trv-ngx_eval',
      'trv-ngx_rds_csv',
      'trv-ngx_form_input',
      'trv-ngx_iconv',
      'trv-ngx_replace_filter'
    ]
  },
  'tt2' => {
    'test' => [
      'perl -MTemplate -e1'
    ],
    'yum' => [
      'perl-Template-Toolkit'
    ]
  },
  'tv' => {
    'dep' => [
      'tv1',
      'tv2',
      'tv-sregex',
      'tv-resty-cli'
    ]
  },
  'tv-lua-resty-core' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-core'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-lua-resty-dns' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-dns'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-dns',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-lua-resty-lock' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-lock'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-lock',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-lua-resty-logger-socket' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-logger-socket'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-logger-socket',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-lua-resty-lrucache' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-lrucache'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-lrucache',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-lua-resty-memcached' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-memcached'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-memcached',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-lua-resty-mysql' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-mysql'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-mysql',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_MYSQL_PATH',
      '/var/lib/mysql/mysql.sock'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-lua-resty-redis' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-redis'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-redis',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-lua-resty-string' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-string'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-string',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-lua-resty-upload' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-upload'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-upload',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-lua-resty-upstream-healthcheck' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-upstream-healthcheck'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-upstream-healthcheck',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-lua-resty-websocket' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-websocket'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-websocket',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-ngx_array_var' => {
    'always' => [],
    'cwd' => [
      '~/git/array-var-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_array_var',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc'
    ],
    'env' => [
      'PATH',
      '~/git/array-var-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-ngx_coolkit' => {
    'always' => [],
    'cwd' => [
      '~/git/coolkit-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_coolkit',
      'gd-devel',
      'ngx-coolkit-build-script',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua',
      'ngx_rds_json'
    ],
    'env' => [
      'PATH',
      '~/git/coolkit-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-ngx_drizzle' => {
    'always' => [],
    'cwd' => [
      '~/git/drizzle-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_drizzle',
      'gd-devel',
      'run-mysql',
      'ngx_lua',
      'ngx_echo',
      'ngx_rds_json',
      'ngx_headers_more',
      'ndk',
      'ngx_set_misc'
    ],
    'env' => [
      'PATH',
      '~/git/drizzle-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-ngx_echo' => {
    'always' => [],
    'cwd' => [
      '~/git/echo-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_echo',
      'gd-devel',
      'ndk',
      'ngx_set_misc',
      'ngx_eval',
      'ngx_xss',
      'ngx_rds_json',
      'ngx_headers_more',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/echo-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-ngx_encrypted_session' => {
    'always' => [],
    'cwd' => [
      '~/git/encrypted-session-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_encrypted_session',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/encrypted-session-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-ngx_eval' => {
    'always' => [],
    'cwd' => [
      '~/git/eval-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_eval',
      'gd-devel',
      'run-memcached',
      'ngx_echo',
      'ngx_memc'
    ],
    'env' => [
      'PATH',
      '~/git/eval-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-ngx_example_lua' => {
    'always' => [],
    'cwd' => [
      '~/git/example-lua-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_example_lua',
      'gd-devel',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/example-lua-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-ngx_form_input' => {
    'always' => [],
    'cwd' => [
      '~/git/form-input-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_form_input',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var'
    ],
    'env' => [
      'PATH',
      '~/git/form-input-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-ngx_headers_more' => {
    'always' => [],
    'cwd' => [
      '~/git/headers-more-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_headers_more',
      'gd-devel',
      'ngx_eval',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/headers-more-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-ngx_iconv' => {
    'always' => [],
    'cwd' => [
      '~/git/iconv-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_iconv',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua',
      'ngx_rds_json'
    ],
    'env' => [
      'PATH',
      '~/git/iconv-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-ngx_lua' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_lua',
      'gd-devel',
      'run-memcached',
      'run-redis',
      'run-mysql',
      'mockeagain',
      'pcrejit',
      'ndk',
      'ngx_set_misc',
      'ngx_auth_request',
      'ngx_echo',
      'ngx_memc',
      'ngx_headers_more',
      'ngx_drizzle',
      'ngx_srcache',
      'ngx_rds_json',
      'ngx_coolkit',
      'ngx_redis2',
      'ngx_lua_upstream',
      'lua-resty-core',
      'ngx_openresty-debug'
    ],
    'env' => [
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build2.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build2.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-ngx_lua_upstream' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-upstream-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_lua_upstream',
      'gd-devel',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-upstream-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-ngx_memc' => {
    'always' => [],
    'cwd' => [
      '~/git/memc-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_memc',
      'gd-devel',
      'run-memcached',
      'ndk',
      'ngx_eval',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/memc-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-ngx_postgres' => {
    'always' => [],
    'cwd' => [
      '~/git/postgres-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_postgres',
      'gd-devel',
      'ngx-postgres-build-script',
      'ngx_echo',
      'ngx_lua',
      'ngx_eval',
      'ngx_rds_json',
      'ndk',
      'ngx_set_misc',
      'ngx_form_input',
      'ngx_coolkit',
      'ngx_auth_request',
      'run-postgres'
    ],
    'env' => [
      'PATH',
      '~/git/postgres-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-ngx_rds_csv' => {
    'always' => [],
    'cwd' => [
      '~/git/rds-csv-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_rds_csv',
      'gd-devel',
      'run-mysql',
      'run-postgres',
      'ngx_eval',
      'ngx_echo',
      'ngx_xss',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var',
      'ngx_drizzle',
      'ngx_form_input',
      'ngx_postgres'
    ],
    'env' => [
      'PATH',
      '~/git/rds-csv-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-ngx_rds_json' => {
    'always' => [],
    'cwd' => [
      '~/git/rds-json-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_rds_json',
      'gd-devel',
      'run-mysql',
      'run-postgres',
      'ngx_drizzle',
      'ngx_eval',
      'ngx_echo',
      'ngx_xss',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var',
      'ngx_form_input',
      'ngx_postgres'
    ],
    'env' => [
      'PATH',
      '~/git/rds-json-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-ngx_redis2' => {
    'always' => [],
    'cwd' => [
      '~/git/redis2-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_redis2',
      'gd-devel',
      'run-redis',
      'ndk',
      'ngx_eval',
      'ngx_echo',
      'ngx_set_misc',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/redis2-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-ngx_replace_filter' => {
    'always' => [],
    'cwd' => [
      '~/git/replace-filter-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_replace_filter',
      'gd-devel',
      'sregex',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'SREGEX_INC',
      '~/git/sregex/src',
      'SREGEX_LIB',
      '~/git/sregex',
      'PATH',
      '~/git/replace-filter-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-ngx_set_misc' => {
    'always' => [],
    'cwd' => [
      '~/git/set-misc-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_set_misc',
      'gd-devel',
      'ndk',
      'ngx_echo',
      'ngx_iconv'
    ],
    'env' => [
      'PATH',
      '~/git/set-misc-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-ngx_srcache' => {
    'always' => [],
    'cwd' => [
      '~/git/srcache-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_srcache',
      'gd-devel',
      'run-memcached',
      'run-redis',
      'run-mysql',
      'run-postgres'
    ],
    'env' => [
      'PATH',
      '~/git/srcache-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-ngx_xss' => {
    'always' => [],
    'cwd' => [
      '~/git/xss-nginx-module'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_xss',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/xss-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-resty-cli' => {
    'always' => [],
    'cwd' => [
      '~/git/resty-cli'
    ],
    'dep' => [
      'ccache',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'resty-cli',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_RESTY_USE_VALGRIND',
      '1'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tv-sregex' => {
    'always' => [],
    'cwd' => [
      '~/git/sregex'
    ],
    'dep' => [
      'sregex'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'PATH=/opt/perl516/bin:$PATH make valtest -j$jobs'
    ]
  },
  'tv1' => {
    'dep' => [
      'tv-ngx_array_var',
      'tv-ngx_redis2',
      'tv-ngx_lua'
    ]
  },
  'tv2' => {
    'dep' => [
      'tv-ngx_srcache',
      'tv-ngx_memc',
      'tv-ngx_set_misc',
      'tv-ngx_xss',
      'tv-ngx_drizzle',
      'tv-ngx_rds_json',
      'tv-ngx_echo',
      'tv-ngx_postgres',
      'tv-ngx_eval',
      'tv-ngx_headers_more',
      'tv-ngx_rds_csv',
      'tv-ngx_encrypted_session',
      'tv-ngx_form_input',
      'tv-ngx_coolkit',
      'tv-ngx_iconv',
      'tv-ngx_example_lua',
      'tv-ngx_lua_upstream',
      'tv-ngx_replace_filter'
    ]
  },
  'tw' => {
    'dep' => [
      'tw-ngx_redis2',
      'tw-ngx_lua',
      'tw-ngx_srcache',
      'tw-ngx_memc',
      'tw-ngx_drizzle',
      'tw-ngx_rds_json',
      'tw-ngx_echo',
      'tw-ngx_postgres',
      'tw-ngx_eval',
      'tw-ngx_rds_csv',
      'tw-ngx_form_input',
      'tw-ngx_iconv',
      'tw-ngx_replace_filter',
      'tw-lua-resty-memcached',
      'tw-lua-resty-redis',
      'tw-lua-resty-mysql',
      'tw-lua-resty-string',
      'tw-lua-resty-upload',
      'tw-lua-resty-dns',
      'tw-lua-resty-websocket',
      'tw-lua-resty-lock',
      'tw-lua-resty-logger-socket',
      'tw-lua-resty-core',
      'tw-lua-resty-upstream-healthcheck',
      'tw-lua-resty-lrucache'
    ]
  },
  'tw-lua-resty-core' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-core'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-lua-resty-dns' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-dns'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-dns',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-lua-resty-lock' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-lock'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-lock',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-lua-resty-logger-socket' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-logger-socket'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-logger-socket',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-lua-resty-lrucache' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-lrucache'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-lrucache',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-lua-resty-memcached' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-memcached'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-memcached',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-lua-resty-mysql' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-mysql'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-mysql',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'TEST_NGINX_MYSQL_PATH',
      '/var/lib/mysql/mysql.sock'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-lua-resty-redis' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-redis'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-redis',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-lua-resty-string' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-string'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-string',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-lua-resty-upload' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-upload'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-upload',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-lua-resty-upstream-healthcheck' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-upstream-healthcheck'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-upstream-healthcheck',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-lua-resty-websocket' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-websocket'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-websocket',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-ngx_coolkit' => {
    'always' => [],
    'cwd' => [
      '~/git/coolkit-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_coolkit',
      'gd-devel',
      'ngx-coolkit-build-script',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua',
      'ngx_rds_json'
    ],
    'env' => [
      'PATH',
      '~/git/coolkit-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-ngx_drizzle' => {
    'always' => [],
    'cwd' => [
      '~/git/drizzle-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_drizzle',
      'gd-devel',
      'run-mysql',
      'ngx_lua',
      'ngx_echo',
      'ngx_rds_json',
      'ngx_headers_more',
      'ndk',
      'ngx_set_misc'
    ],
    'env' => [
      'PATH',
      '~/git/drizzle-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-ngx_echo' => {
    'always' => [],
    'cwd' => [
      '~/git/echo-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_echo',
      'gd-devel',
      'ndk',
      'ngx_set_misc',
      'ngx_eval',
      'ngx_xss',
      'ngx_rds_json',
      'ngx_headers_more',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/echo-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-ngx_eval' => {
    'always' => [],
    'cwd' => [
      '~/git/eval-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_eval',
      'gd-devel',
      'run-memcached',
      'ngx_echo',
      'ngx_memc'
    ],
    'env' => [
      'PATH',
      '~/git/eval-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-ngx_form_input' => {
    'always' => [],
    'cwd' => [
      '~/git/form-input-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_form_input',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var'
    ],
    'env' => [
      'PATH',
      '~/git/form-input-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-ngx_iconv' => {
    'always' => [],
    'cwd' => [
      '~/git/iconv-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_iconv',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua',
      'ngx_rds_json'
    ],
    'env' => [
      'PATH',
      '~/git/iconv-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-ngx_lua' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_lua',
      'gd-devel',
      'run-memcached',
      'run-redis',
      'run-mysql',
      'mockeagain',
      'pcrejit',
      'ndk',
      'ngx_set_misc',
      'ngx_auth_request',
      'ngx_echo',
      'ngx_memc',
      'ngx_headers_more',
      'ngx_drizzle',
      'ngx_srcache',
      'ngx_rds_json',
      'ngx_coolkit',
      'ngx_redis2',
      'ngx_lua_upstream',
      'lua-resty-core',
      'ngx_openresty-debug'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build2.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build2.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-ngx_memc' => {
    'always' => [],
    'cwd' => [
      '~/git/memc-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_memc',
      'gd-devel',
      'run-memcached',
      'ndk',
      'ngx_eval',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/memc-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-ngx_postgres' => {
    'always' => [],
    'cwd' => [
      '~/git/postgres-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_postgres',
      'gd-devel',
      'ngx-postgres-build-script',
      'ngx_echo',
      'ngx_lua',
      'ngx_eval',
      'ngx_rds_json',
      'ndk',
      'ngx_set_misc',
      'ngx_form_input',
      'ngx_coolkit',
      'ngx_auth_request',
      'run-postgres'
    ],
    'env' => [
      'PATH',
      '~/git/postgres-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-ngx_rds_csv' => {
    'always' => [],
    'cwd' => [
      '~/git/rds-csv-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_rds_csv',
      'gd-devel',
      'run-mysql',
      'run-postgres',
      'ngx_eval',
      'ngx_echo',
      'ngx_xss',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var',
      'ngx_drizzle',
      'ngx_form_input',
      'ngx_postgres'
    ],
    'env' => [
      'PATH',
      '~/git/rds-csv-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-ngx_rds_json' => {
    'always' => [],
    'cwd' => [
      '~/git/rds-json-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_rds_json',
      'gd-devel',
      'run-mysql',
      'run-postgres',
      'ngx_drizzle',
      'ngx_eval',
      'ngx_echo',
      'ngx_xss',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var',
      'ngx_form_input',
      'ngx_postgres'
    ],
    'env' => [
      'PATH',
      '~/git/rds-json-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-ngx_redis2' => {
    'always' => [],
    'cwd' => [
      '~/git/redis2-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_redis2',
      'gd-devel',
      'run-redis',
      'ndk',
      'ngx_eval',
      'ngx_echo',
      'ngx_set_misc',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/redis2-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-ngx_replace_filter' => {
    'always' => [],
    'cwd' => [
      '~/git/replace-filter-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_replace_filter',
      'gd-devel',
      'sregex',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'SREGEX_INC',
      '~/git/sregex/src',
      'SREGEX_LIB',
      '~/git/sregex',
      'PATH',
      '~/git/replace-filter-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'tw-ngx_srcache' => {
    'always' => [],
    'cwd' => [
      '~/git/srcache-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_srcache',
      'gd-devel',
      'run-memcached',
      'run-redis',
      'run-mysql',
      'run-postgres'
    ],
    'env' => [
      'PATH',
      '~/git/srcache-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '$use_stap',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv' => {
    'dep' => [
      'twv1',
      'twv2'
    ]
  },
  'twv-lua-resty-core' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-core'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-lua-resty-dns' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-dns'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-dns',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-lua-resty-lock' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-lock'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-lock',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-lua-resty-logger-socket' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-logger-socket'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-logger-socket',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-lua-resty-lrucache' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-lrucache'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-lrucache',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-lua-resty-memcached' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-memcached'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-memcached',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-lua-resty-mysql' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-mysql'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-mysql',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so',
      'TEST_NGINX_MYSQL_PATH',
      '/var/lib/mysql/mysql.sock'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-lua-resty-redis' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-redis'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-redis',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-lua-resty-string' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-string'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-string',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-lua-resty-upload' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-upload'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-upload',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-lua-resty-upstream-healthcheck' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-upstream-healthcheck'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-upstream-healthcheck',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-lua-resty-websocket' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-resty-websocket'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'ngx_lua',
      'nginx-module-test',
      'lua-resty-websocket',
      'lua-resty-core',
      'build-ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-ngx_coolkit' => {
    'always' => [],
    'cwd' => [
      '~/git/coolkit-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_coolkit',
      'gd-devel',
      'ngx-coolkit-build-script',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua',
      'ngx_rds_json'
    ],
    'env' => [
      'PATH',
      '~/git/coolkit-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-ngx_drizzle' => {
    'always' => [],
    'cwd' => [
      '~/git/drizzle-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_drizzle',
      'gd-devel',
      'run-mysql',
      'ngx_lua',
      'ngx_echo',
      'ngx_rds_json',
      'ngx_headers_more',
      'ndk',
      'ngx_set_misc'
    ],
    'env' => [
      'PATH',
      '~/git/drizzle-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-ngx_echo' => {
    'always' => [],
    'cwd' => [
      '~/git/echo-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_echo',
      'gd-devel',
      'ndk',
      'ngx_set_misc',
      'ngx_eval',
      'ngx_xss',
      'ngx_rds_json',
      'ngx_headers_more',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/echo-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-ngx_eval' => {
    'always' => [],
    'cwd' => [
      '~/git/eval-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_eval',
      'gd-devel',
      'run-memcached',
      'ngx_echo',
      'ngx_memc'
    ],
    'env' => [
      'PATH',
      '~/git/eval-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-ngx_form_input' => {
    'always' => [],
    'cwd' => [
      '~/git/form-input-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_form_input',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var'
    ],
    'env' => [
      'PATH',
      '~/git/form-input-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-ngx_iconv' => {
    'always' => [],
    'cwd' => [
      '~/git/iconv-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_iconv',
      'gd-devel',
      'ngx_echo',
      'ndk',
      'ngx_set_misc',
      'ngx_lua',
      'ngx_rds_json'
    ],
    'env' => [
      'PATH',
      '~/git/iconv-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-ngx_lua' => {
    'always' => [],
    'cwd' => [
      '~/git/lua-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_lua',
      'gd-devel',
      'run-memcached',
      'run-redis',
      'run-mysql',
      'mockeagain',
      'pcrejit',
      'ndk',
      'ngx_set_misc',
      'ngx_auth_request',
      'ngx_echo',
      'ngx_memc',
      'ngx_headers_more',
      'ngx_drizzle',
      'ngx_srcache',
      'ngx_rds_json',
      'ngx_coolkit',
      'ngx_redis2',
      'ngx_lua_upstream',
      'lua-resty-core',
      'ngx_openresty-debug'
    ],
    'env' => [
      'PATH',
      '~/git/lua-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build2.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build2.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-ngx_memc' => {
    'always' => [],
    'cwd' => [
      '~/git/memc-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_memc',
      'gd-devel',
      'run-memcached',
      'ndk',
      'ngx_eval',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/memc-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-ngx_postgres' => {
    'always' => [],
    'cwd' => [
      '~/git/postgres-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_postgres',
      'gd-devel',
      'ngx-postgres-build-script',
      'ngx_echo',
      'ngx_lua',
      'ngx_eval',
      'ngx_rds_json',
      'ndk',
      'ngx_set_misc',
      'ngx_form_input',
      'ngx_coolkit',
      'ngx_auth_request',
      'run-postgres'
    ],
    'env' => [
      'PATH',
      '~/git/postgres-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-ngx_rds_csv' => {
    'always' => [],
    'cwd' => [
      '~/git/rds-csv-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_rds_csv',
      'gd-devel',
      'run-mysql',
      'run-postgres',
      'ngx_eval',
      'ngx_echo',
      'ngx_xss',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var',
      'ngx_drizzle',
      'ngx_form_input',
      'ngx_postgres'
    ],
    'env' => [
      'PATH',
      '~/git/rds-csv-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-ngx_rds_json' => {
    'always' => [],
    'cwd' => [
      '~/git/rds-json-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_rds_json',
      'gd-devel',
      'run-mysql',
      'run-postgres',
      'ngx_drizzle',
      'ngx_eval',
      'ngx_echo',
      'ngx_xss',
      'ndk',
      'ngx_set_misc',
      'ngx_array_var',
      'ngx_form_input',
      'ngx_postgres'
    ],
    'env' => [
      'PATH',
      '~/git/rds-json-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-ngx_redis2' => {
    'always' => [],
    'cwd' => [
      '~/git/redis2-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_redis2',
      'gd-devel',
      'run-redis',
      'ndk',
      'ngx_eval',
      'ngx_echo',
      'ngx_set_misc',
      'ngx_lua'
    ],
    'env' => [
      'PATH',
      '~/git/redis2-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-ngx_replace_filter' => {
    'always' => [],
    'cwd' => [
      '~/git/replace-filter-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_replace_filter',
      'gd-devel',
      'sregex',
      'ngx_echo',
      'ngx_lua'
    ],
    'env' => [
      'SREGEX_INC',
      '~/git/sregex/src',
      'SREGEX_LIB',
      '~/git/sregex',
      'PATH',
      '~/git/replace-filter-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv-ngx_srcache' => {
    'always' => [],
    'cwd' => [
      '~/git/srcache-nginx-module'
    ],
    'dep' => [
      'ccache',
      'mockeagain',
      'luajit_sysmalloc',
      'valgrind',
      'systemtap',
      'run-caching-nameserver',
      'nginx-module-test',
      'ngx_srcache',
      'gd-devel',
      'run-memcached',
      'run-redis',
      'run-mysql',
      'run-postgres'
    ],
    'env' => [
      'PATH',
      '~/git/srcache-nginx-module/work/nginx/sbin:$PATH',
      'PCRE_LIB',
      '/opt/pcrejit/lib',
      'PCRE_INC',
      '/opt/pcrejit/include',
      'LIBDRIZZLE_INC',
      '/opt/drizzle/include/libdrizzle-1.0',
      'LIBDRIZZLE_LIB',
      '/opt/drizzle/lib',
      'LUAJIT_LIB',
      '/opt/luajit/lib',
      'LUAJIT_INC',
      '`echo -n /opt/luajit/include/luajit-*`',
      'TEST_NGINX_EVENT_TYPE',
      '',
      'MOCKEAGAIN',
      '',
      'TEST_NGINX_RESOLVER',
      '127.0.0.1',
      'TEST_NGINX_USE_STAP',
      '',
      'NGX_BUILD_CC_OPTS',
      '-I/opt/systemtap/include',
      'NGX_BUILD_CC_OPTS',
      '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS',
      'NGX_BUILD_CC',
      'ccache gcc47',
      'CCACHE_BASEDIR',
      '$PWD',
      'NGX_BUILD_OPT',
      '$nginx_cc_opt',
      'NGX_BUILD_NO_DEBUG',
      '',
      'NGX_BUILD_JOBS',
      '$jobs',
      'NGX_BUILD_DTRACE',
      '1',
      'LD_LIBRARY_PATH',
      '~/git/mockeagain:$LD_LIBRARY_PATH',
      'LD_PRELOAD',
      '',
      'TEST_NGINX_CHECK_LEAK',
      '',
      'TEST_NGINX_USE_HUP',
      '',
      'TEST_NGINX_SLEEP',
      '0.015',
      'LD_LIBRARY_PATH',
      '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH',
      'TEST_NGINX_USE_VALGRIND',
      '1',
      'TEST_NGINX_POSTPONE_OUTPUT',
      '1',
      'TEST_NGINX_EVENT_TYPE',
      'poll',
      'MOCKEAGAIN',
      'w',
      'LD_PRELOAD',
      '~/git/mockeagain/mockeagain.so'
    ],
    'sh' => [
      'PAGER= git log HEAD^..HEAD',
      'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi',
      './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )',
      'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"',
      'killall nginx || exit 0',
      'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="package.path = \'$HOME/git/lua-resty-core/lib/?.lua;$HOME/git/lua-resty-lrucache/lib/?.lua;\' .. (package.path or \'\') jit.opt.start(\'minstitch=0\', \'hotloop=1\', \'hotexit=1\') require \'resty.core\'"; fi; prove -I../test-nginx/lib -r t || exit 0'
    ]
  },
  'twv1' => {
    'dep' => [
      'twv-ngx_redis2',
      'twv-ngx_lua',
      'trv-lua-resty-memcached',
      'trv-lua-resty-redis',
      'trv-lua-resty-mysql',
      'trv-lua-resty-string',
      'trv-lua-resty-upload',
      'trv-lua-resty-dns',
      'trv-lua-resty-websocket',
      'trv-lua-resty-lock',
      'trv-lua-resty-logger-socket',
      'trv-lua-resty-core',
      'trv-lua-resty-upstream-healthcheck',
      'trv-lua-resty-lrucache'
    ]
  },
  'twv2' => {
    'dep' => [
      'twv-ngx_srcache',
      'twv-ngx_memc',
      'twv-ngx_drizzle',
      'twv-ngx_rds_json',
      'twv-ngx_echo',
      'twv-ngx_postgres',
      'twv-ngx_eval',
      'twv-ngx_rds_csv',
      'twv-ngx_form_input',
      'twv-ngx_iconv',
      'twv-ngx_replace_filter'
    ]
  },
  'valgrind' => {
    'cwd' => [
      '/tmp'
    ],
    'dep' => [
      'cc'
    ],
    'env' => [
      'PATH',
      '/opt/valgrind/bin:$PATH'
    ],
    'fetch' => [
      'http://valgrind.org/downloads/valgrind-$valgrind_version.tar.bz2'
    ],
    'file' => [
      '/opt/valgrind/bin/valgrind'
    ],
    'sh' => [
      'cd valgrind-$valgrind_version && ./configure --prefix=/opt/valgrind && make -j$jobs && sudo make install'
    ],
    'tarball' => [
      'valgrind-$valgrind_version.tar.bz2'
    ],
    'test' => [
      '/opt/valgrind/bin/valgrind --version|grep $valgrind_version'
    ]
  },
  'weighttp' => {
    'cwd' => [
      '~/git/weighttp'
    ],
    'dep' => [
      'git',
      'libev',
      'python'
    ],
    'git' => [
      'https://github.com/lighttpd/weighttp',
      '~/git/weighttp'
    ],
    'prog' => [
      'weighttp'
    ],
    'sh' => [
      './waf configure && ./waf build && sudo ./waf install'
    ]
  },
  'wget' => {
    'prog' => [
      'wget'
    ],
    'yum' => [
      'wget'
    ]
  },
  'yum-utils' => {
    'prog' => [
      'debuginfo-install'
    ],
    'yum' => [
      'yum-utils'
    ]
  }
};

main();
